import { createComponent, EventEmitter } from "@angular/core";
import { Subject, takeUntil } from "rxjs";
export class RendererWrapper {
    componentType;
    appRef;
    injector;
    cdr;
    zone;
    event$ = new EventEmitter();
    closed$ = new Subject();
    constructor(componentType, appRef, injector, cdr, zone) {
        this.componentType = componentType;
        this.appRef = appRef;
        this.injector = injector;
        this.cdr = cdr;
        this.zone = zone;
    }
    render(cellDiv, rowIndex, columnIndex, areaIdent, areaModel, cellValue, domService) {
        const componentRef = createComponent(this.componentType, {
            environmentInjector: this.injector
        });
        componentRef.instance.setData(rowIndex, columnIndex, areaIdent, areaModel, cellValue);
        const emmiterNames = Object.keys(componentRef.instance)
            .filter(key => {
            // @ts-ignore
            const t = componentRef.instance[key];
            return t['subscribe'];
        });
        // @ts-ignore
        const observables = (emmiterNames.map(key => componentRef.instance[key]));
        observables.forEach(obs => obs
            .pipe(takeUntil(this.closed$))
            .subscribe((event) => {
            console.info('RendererWrapper event >', event); // TODO hmm?
            this.event$.next(event);
        }));
        cellDiv.appendChild(componentRef.location.nativeElement);
        this.appRef.attachView(componentRef.hostView);
        this.zone.run(() => {
            this.cdr.detectChanges();
        });
        return () => {
            // clean up:
            this.appRef.detachView(componentRef.hostView);
            this.closed$.next(Date.now());
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXItd3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci10YWJsZS9zcmMvbGliL2FuZ3VsYXItdGFibGUvc2VydmljZS9yZW5kZXJlci13cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFHTCxlQUFlLEVBRWYsWUFBWSxFQUdiLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxPQUFPLEVBQUUsU0FBUyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBSXhDLE1BQU0sT0FBTyxlQUFlO0lBT2hCO0lBQ0E7SUFDQTtJQUNBO0lBQ1M7SUFSSCxNQUFNLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUNoQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztJQUVqRCxZQUNVLGFBQTJDLEVBQzNDLE1BQXNCLEVBQ3RCLFFBQTZCLEVBQzdCLEdBQXNCLEVBQ2IsSUFBWTtRQUpyQixrQkFBYSxHQUFiLGFBQWEsQ0FBOEI7UUFDM0MsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBcUI7UUFDN0IsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFDYixTQUFJLEdBQUosSUFBSSxDQUFRO0lBRS9CLENBQUM7SUFFRCxNQUFNLENBQ0osT0FBdUIsRUFDdkIsUUFBZ0IsRUFDaEIsV0FBbUIsRUFDbkIsU0FBb0IsRUFDcEIsU0FBc0IsRUFDdEIsU0FBYyxFQUNkLFVBQXdCO1FBRXhCLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3ZELG1CQUFtQixFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ25DLENBQUMsQ0FBQztRQUNILFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUMzQixRQUFRLEVBQ1IsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxDQUFDLENBQUM7UUFHYixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7YUFDcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1osYUFBYTtZQUNiLE1BQU0sQ0FBQyxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFTCxhQUFhO1FBQ2IsTUFBTSxXQUFXLEdBQWlCLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFnQixDQUFDLENBQUMsQ0FBQztRQUN4RyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRzthQUMzQixJQUFJLENBQ0gsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FDeEI7YUFDQSxTQUFTLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWTtZQUM1RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBRUYsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXpELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sR0FBRyxFQUFFO1lBQ1YsWUFBWTtZQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUM7SUFDSixDQUFDO0NBR0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FyZWFJZGVudCwgQXJlYU1vZGVsSWYsIENlbGxSZW5kZXJlcklmLCBEb21TZXJ2aWNlSWYsIFJlbmRlcmVyQ2xlYW51cEZuVHlwZX0gZnJvbSBcIkBndWlleHBlcnQvdGFibGVcIjtcbmltcG9ydCB7XG4gIEFwcGxpY2F0aW9uUmVmLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgY3JlYXRlQ29tcG9uZW50LFxuICBFbnZpcm9ubWVudEluamVjdG9yLFxuICBFdmVudEVtaXR0ZXIsXG4gIE5nWm9uZSxcbiAgVHlwZVxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtDb21wb25lbnRSZW5kZXJlcklmfSBmcm9tIFwiLi4vY29tcG9uZW50LXJlbmRlcmVyLmlmXCI7XG5pbXBvcnQge1N1YmplY3QsIHRha2VVbnRpbH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInJ4anMvaW50ZXJuYWwvT2JzZXJ2YWJsZVwiO1xuXG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJlcldyYXBwZXI8VCBleHRlbmRzIENvbXBvbmVudFJlbmRlcmVySWY8VD4+XG4gIGltcGxlbWVudHMgQ2VsbFJlbmRlcmVySWYge1xuXG4gIHB1YmxpYyByZWFkb25seSBldmVudCQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjbG9zZWQkID0gbmV3IFN1YmplY3Q8bnVtYmVyPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY29tcG9uZW50VHlwZTogVHlwZTxDb21wb25lbnRSZW5kZXJlcklmPFQ+PixcbiAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogRW52aXJvbm1lbnRJbmplY3RvcixcbiAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSByZWFkb25seSB6b25lOiBOZ1pvbmVcbiAgKSB7XG4gIH1cblxuICByZW5kZXIoXG4gICAgY2VsbERpdjogSFRNTERpdkVsZW1lbnQsXG4gICAgcm93SW5kZXg6IG51bWJlcixcbiAgICBjb2x1bW5JbmRleDogbnVtYmVyLFxuICAgIGFyZWFJZGVudDogQXJlYUlkZW50LFxuICAgIGFyZWFNb2RlbDogQXJlYU1vZGVsSWYsXG4gICAgY2VsbFZhbHVlOiBhbnksXG4gICAgZG9tU2VydmljZTogRG9tU2VydmljZUlmKTogUmVuZGVyZXJDbGVhbnVwRm5UeXBlIHwgdW5kZWZpbmVkIHtcblxuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGNyZWF0ZUNvbXBvbmVudCh0aGlzLmNvbXBvbmVudFR5cGUsIHtcbiAgICAgIGVudmlyb25tZW50SW5qZWN0b3I6IHRoaXMuaW5qZWN0b3JcbiAgICB9KTtcbiAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uuc2V0RGF0YShcbiAgICAgIHJvd0luZGV4LFxuICAgICAgY29sdW1uSW5kZXgsXG4gICAgICBhcmVhSWRlbnQsXG4gICAgICBhcmVhTW9kZWwsXG4gICAgICBjZWxsVmFsdWUpO1xuXG5cbiAgICBjb25zdCBlbW1pdGVyTmFtZXMgPSBPYmplY3Qua2V5cyhjb21wb25lbnRSZWYuaW5zdGFuY2UpXG4gICAgICAuZmlsdGVyKGtleSA9PiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgdCA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZVtrZXldO1xuICAgICAgICByZXR1cm4gdFsnc3Vic2NyaWJlJ11cbiAgICAgIH0pO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IG9ic2VydmFibGVzOiBPYnNlcnZhYmxlW10gPSAoZW1taXRlck5hbWVzLm1hcChrZXkgPT4gKGNvbXBvbmVudFJlZi5pbnN0YW5jZVtrZXldIGFzIE9ic2VydmFibGUpKSk7XG4gICAgb2JzZXJ2YWJsZXMuZm9yRWFjaChvYnMgPT4gb2JzXG4gICAgICAucGlwZShcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuY2xvc2VkJClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdSZW5kZXJlcldyYXBwZXIgZXZlbnQgPicsIGV2ZW50KTsgLy8gVE9ETyBobW0/XG4gICAgICAgIHRoaXMuZXZlbnQkLm5leHQoZXZlbnQpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgY2VsbERpdi5hcHBlbmRDaGlsZChjb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCk7XG5cbiAgICB0aGlzLmFwcFJlZi5hdHRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG5cbiAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBjbGVhbiB1cDpcbiAgICAgIHRoaXMuYXBwUmVmLmRldGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICAgIHRoaXMuY2xvc2VkJC5uZXh0KERhdGUubm93KCkpO1xuICAgIH07XG4gIH1cblxuXG59XG4iXX0=