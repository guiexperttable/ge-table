import { ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from "@angular/core";
import { Subject } from "rxjs";
import { EventListenerIf, GeModelChangeEvent, GeMouseEvent, TableApi, TableModelIf, TableOptionsIf } from "@guiexpert/table";
import { DomService } from "./service/dom-service";
import * as i0 from "@angular/core";
export declare class TableComponent implements OnInit, OnDestroy, EventListenerIf {
    private readonly renderer;
    private readonly elementRef;
    private readonly zone;
    private readonly domService;
    tableReady: Subject<TableApi>;
    mouseMoved: Subject<GeMouseEvent>;
    mouseDragging: Subject<GeMouseEvent>;
    mouseDraggingEnded: Subject<GeMouseEvent>;
    contextmenu: Subject<GeMouseEvent>;
    mouseClicked: Subject<GeMouseEvent>;
    modelChanged: Subject<GeModelChangeEvent>;
    checkboxChanged: Subject<any[]>;
    tableModel?: TableModelIf;
    tableOptions: TableOptionsIf;
    debounceMouseClickDelay: number;
    private debounceMouseClick;
    private tableScope?;
    private alive;
    constructor(renderer: Renderer2, elementRef: ElementRef, zone: NgZone, domService: DomService);
    onContextmenu(evt: GeMouseEvent): void;
    onMouseMoved(evt: GeMouseEvent): void;
    onMouseClicked(evt: GeMouseEvent): void;
    onCheckboxChanged(arr: any[]): void;
    onModelChanged(evt: GeModelChangeEvent): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onMouseDragging(evt: GeMouseEvent): void;
    onMouseDraggingEnd(evt: GeMouseEvent): void;
    private initModel;
    private init;
    static ɵfac: i0.ɵɵFactoryDeclaration<TableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TableComponent, "guiexpert-table", never, { "tableModel": { "alias": "tableModel"; "required": false; }; "tableOptions": { "alias": "tableOptions"; "required": false; }; "debounceMouseClickDelay": { "alias": "debounceMouseClickDelay"; "required": false; }; }, { "tableReady": "tableReady"; "mouseMoved": "mouseMoved"; "mouseDragging": "mouseDragging"; "mouseDraggingEnded": "mouseDraggingEnded"; "contextmenu": "contextmenu"; "mouseClicked": "mouseClicked"; "modelChanged": "modelChanged"; "checkboxChanged": "checkboxChanged"; }, never, never, true, never>;
}
