import { Padding } from "./padding";
import { DefaultRowHeights } from "../options/default-row-heights";
import { CheckboxColumnDef } from "../common/checkbox-column-def";
import { CheckboxModel } from "../../checkbox/checkbox-model";
/**
 * This is a default implementation of TableModelIf.
 * Ths TableModel is on one hand a container for the header, body, and footer models
 * (see : #getAreaModel, and #AreaModelIf), and on the other hand the master of
 * the column information (#getColumnCount(), #getColumnWidth(columnIndex: number)).
 *
 * If getFixedLeftColumnCount() returns a value greater than 0, a fixed west area will be rendered in the
 * header, body, and footer. A value greater than 0 for getFixedLeftColumnCount()
 * will result in the presence of an east area.
 *
 * <pre>
 *  +----------------+-------------------+--------------+
 *  |  header/west   |  header/center    | header/east  |
 *  +----------------+-------------------+--------------+
 *  |  body/west     |  body/center      | body/east    |
 *  +----------------+-------------------+--------------+
 *  |  footer/west   |  footer/center    | footer/east  |
 *  +----------------+-------------------+--------------+ </pre>
 *
 */
export class TableModel {
    headerAreaModel;
    bodyAreaModel;
    footerAreaModel;
    fixedLeftColumnCount;
    fixedRightColumnCount;
    rowCheckboxVisible;
    defaultRowHeights;
    columnDefs;
    columnSizes;
    overridingColumnWidth;
    columnCount;
    parentSize;
    getSelectionModel;
    rowCount = 0;
    contentHeightInPx = 0;
    contentWidthInPx = 0;
    // in case of a fixed header, left or right column, footer:
    padding = new Padding(0, 0, 0, 0); // the dimension of the 'body/center'
    xPositions = [];
    constructor(headerAreaModel, bodyAreaModel, footerAreaModel, fixedLeftColumnCount = 0, fixedRightColumnCount = 0, rowCheckboxVisible = false, defaultRowHeights = new DefaultRowHeights(), columnDefs = [], columnSizes = [], overridingColumnWidth = -1, columnCount = 0, parentSize = 400, // can be important when we have percentage widthes,
    getSelectionModel = () => undefined) {
        this.headerAreaModel = headerAreaModel;
        this.bodyAreaModel = bodyAreaModel;
        this.footerAreaModel = footerAreaModel;
        this.fixedLeftColumnCount = fixedLeftColumnCount;
        this.fixedRightColumnCount = fixedRightColumnCount;
        this.rowCheckboxVisible = rowCheckboxVisible;
        this.defaultRowHeights = defaultRowHeights;
        this.columnDefs = columnDefs;
        this.columnSizes = columnSizes;
        this.overridingColumnWidth = overridingColumnWidth;
        this.columnCount = columnCount;
        this.parentSize = parentSize;
        this.getSelectionModel = getSelectionModel;
        headerAreaModel.areaIdent = "header";
        bodyAreaModel.areaIdent = "body";
        footerAreaModel.areaIdent = "footer";
        if (!this.columnCount) {
            if (this.columnDefs?.length) {
                this.columnCount = this.columnDefs.length;
            }
            else if (this.columnSizes?.length) {
                this.columnCount = this.columnSizes?.length;
            }
        }
        if (this.columnDefs?.length
            && this.columnDefs[0] instanceof CheckboxColumnDef
            && !bodyAreaModel.rowSelectionModel) {
            bodyAreaModel.rowSelectionModel = new CheckboxModel();
        }
    }
    init() {
        this.recalcSize(this.parentSize);
        if (this.overridingColumnWidth === -1) {
            this.calcXPositions();
        }
        if (this.headerAreaModel) {
            this.headerAreaModel.init();
        }
        if (this.bodyAreaModel) {
            this.bodyAreaModel.init();
        }
        if (this.footerAreaModel) {
            this.footerAreaModel.init();
        }
    }
    getColumnCount() {
        return this.columnCount;
    }
    ;
    setColumnWidth(columnIndex, width) {
        width = Math.max(0, width);
        if (this.overridingColumnWidth !== -1) {
            this.overridingColumnWidth = width;
        }
        if (columnIndex > -1 && columnIndex < this.columnSizes?.length) {
            this.columnSizes[columnIndex] = width;
        }
        this.recalcContentWidthInPx();
    }
    getColumnWidth(columnIndex) {
        const cd = this.getColumnDef(columnIndex);
        if (cd && cd.isVisible && !cd.isVisible()) {
            return 0;
        }
        if (this.overridingColumnWidth !== -1) {
            return this.overridingColumnWidth;
        }
        if (columnIndex > -1 && columnIndex < this.columnSizes?.length) {
            return this.columnSizes[columnIndex];
        }
        return 0;
    }
    ;
    getXPosByColumnIndex(columnIndex) {
        if (columnIndex === 0) {
            return 0;
        }
        if (this.overridingColumnWidth > -1) {
            return this.overridingColumnWidth * columnIndex;
        }
        return this.xPositions[columnIndex];
    }
    recalcSize(clientWidth) {
        this.recalcColumnWidthes(clientWidth);
        this.recalcHeightAndPadding();
    }
    recalcHeightAndPadding() {
        const bodyModel = this.getAreaModel("body");
        this.rowCount = bodyModel.getRowCount();
        this.contentHeightInPx = this.getAreaHeight("body");
        this.recalcContentWidthInPx();
        this.recalcPadding();
    }
    recalcPadding() {
        const westWidth = this.getSideAreaWidth("west");
        const eastWidth = this.getSideAreaWidth("east");
        const headerHeight = this.getAreaHeight("header");
        const footerHeight = this.getAreaHeight("footer");
        this.padding = new Padding(headerHeight, eastWidth, footerHeight, westWidth);
    }
    getPadding() {
        return this.padding;
    }
    getContentHeightInPixel() {
        return this.contentHeightInPx;
    }
    getContentWidthInPixel() {
        return this.contentWidthInPx;
    }
    getRowHeight(rowAreaIdent, rowIndex) {
        return this.getAreaModel(rowAreaIdent).getRowHeight(rowIndex);
    }
    getModel(rowAreaIdent) {
        return this.getAreaModel(rowAreaIdent);
    }
    getAreaHeight(areaIdent) {
        const model = this.getModel(areaIdent);
        const rowCount = model.getRowCount();
        if (this.defaultRowHeights[areaIdent]) {
            return rowCount * this.defaultRowHeights[areaIdent];
        }
        let ret = 0;
        for (let i = 0; i < rowCount; i++) {
            ret = ret + model.getRowHeight(i);
        }
        return ret;
    }
    getSideAreaWidth(sideIdent) {
        const [cStart, cEnd] = this.getSideStartAndEndColumnIndex(sideIdent);
        let ret = 0;
        for (let i = cStart; i <= cEnd; i++) {
            ret = ret + this.getColumnWidth(i);
        }
        return ret;
    }
    getSideStartAndEndColumnIndex(sideIdent) {
        const c1 = this.getFixedLeftColumnCount();
        const c2 = this.getFixedRightColumnCount();
        let cStart = 0;
        let cEnd = this.columnCount - 1;
        if (sideIdent === "west") {
            cEnd = c1 - 1;
        }
        else if (sideIdent === "east") {
            cStart = this.columnCount - c2;
        }
        else {
            // center:
            cStart = c1;
            cEnd = this.columnCount - c2 - 1;
        }
        return [cStart, cEnd];
    }
    getColumnDef(index) {
        if (index < this.columnDefs.length) {
            return this.columnDefs[index];
        }
        return undefined;
    }
    getFixedLeftColumnCount() {
        return this.fixedLeftColumnCount;
    }
    getFixedRightColumnCount() {
        return this.fixedRightColumnCount;
    }
    getAreaModel(area) {
        if (area === "header") {
            return this.headerAreaModel;
        }
        if (area === "body") {
            return this.bodyAreaModel;
        }
        if (area === "footer") {
            return this.footerAreaModel;
        }
        throw new Error("Wrong ident.");
    }
    getBodyModel() {
        return this.bodyAreaModel;
    }
    isFooterVisibe() {
        return (this.footerAreaModel?.getRowCount() ?? 0) > 0;
    }
    isHeaderVisibe() {
        return (this.headerAreaModel?.getRowCount() ?? 0) > 0;
    }
    isRowCheckboxVisible() {
        return this.rowCheckboxVisible;
    }
    externalFilterChanged(predictFn) {
        this.getAreaModel("body").externalFilterChanged(predictFn);
    }
    doSort(sortItems) {
        return this.getAreaModel("body").doSort(sortItems);
    }
    getColumnDefs() {
        return this.columnDefs;
    }
    getColumnProperty(columnIndex) {
        return this.columnDefs[columnIndex].property;
    }
    getBodyRowByIndex(rowIndex) {
        return this.getBodyModel().getRowByIndex(rowIndex);
    }
    isSortable(columnIndex) {
        if (this.columnDefs
            && columnIndex < this.columnDefs.length
            && this.columnDefs[columnIndex].sortable) {
            // @ts-ignore
            return this.columnDefs[columnIndex].sortable();
        }
        return false;
    }
    changeColumnOrder(sourceColumnIndex, targetColumnIndex) {
        this.arrayMove(this.columnDefs, sourceColumnIndex, targetColumnIndex);
        this.arrayMove(this.columnSizes, sourceColumnIndex, targetColumnIndex);
        this.headerAreaModel?.changeColumnOrder(sourceColumnIndex, targetColumnIndex);
        this.bodyAreaModel?.changeColumnOrder(sourceColumnIndex, targetColumnIndex);
        this.footerAreaModel?.changeColumnOrder(sourceColumnIndex, targetColumnIndex);
        this.calcXPositions();
    }
    recalcColumnWidthes(clientWidth) {
        if (!this.columnDefs?.length && !this.columnSizes?.length) {
            this.columnSizes = new Array(this.getColumnCount()).fill(this.overridingColumnWidth);
        }
        if (this.columnDefs?.length) {
            this.columnSizes = this.columnDefs.map(def => {
                if (def.width.unit === "%" && clientWidth) {
                    // only for a % value we have to check min and max:
                    let px = Math.floor(def.width.value * clientWidth / 100);
                    if (def.minWidth) {
                        let pxMin = def.minWidth.unit === "px" ? def.minWidth.value : Math.floor(def.minWidth.value * clientWidth / 100);
                        px = Math.max(pxMin, px);
                    }
                    if (def.maxWidth) {
                        let pxMax = def.maxWidth.unit === "px" ? def.maxWidth.value : Math.floor(def.maxWidth.value * clientWidth / 100);
                        px = Math.min(pxMax, px);
                    }
                    return px;
                }
                return def.width.value;
            });
        }
    }
    arrayMove(arr, fromIndex, toIndex) {
        const element = arr.splice(fromIndex, 1)[0];
        arr.splice(toIndex, 0, element);
        return arr;
    }
    recalcContentWidthInPx() {
        this.contentWidthInPx = this.getSideAreaWidth("center");
    }
    calcXPositions() {
        const columnCount = this.getColumnCount();
        this.xPositions = new Array(columnCount + 1);
        this.xPositions[0] = 0;
        for (let i = 0; i < columnCount; i++) {
            this.xPositions[i + 1] = this.getColumnWidth(i) + this.xPositions[i];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,