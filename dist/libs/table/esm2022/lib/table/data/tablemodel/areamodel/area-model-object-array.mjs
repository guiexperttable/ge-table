import { AbstractAreaModel } from "./abstract-area-model";
import { TreeRow } from "../../common/tree-row";
import { SorterService } from "../../../service/sorter.service";
export class AreaModelObjectyArray extends AbstractAreaModel {
    areaIdent;
    rows;
    defaultRowHeight;
    columnDefs;
    properties;
    filteredRows;
    sorterService = new SorterService();
    constructor(areaIdent, rows, defaultRowHeight, columnDefs = []) {
        super(areaIdent, columnDefs, defaultRowHeight);
        this.areaIdent = areaIdent;
        this.rows = rows;
        this.defaultRowHeight = defaultRowHeight;
        this.columnDefs = columnDefs;
        this.filteredRows = [...rows];
        this.properties = columnDefs.map(def => def.property);
    }
    getRowCount() {
        return this.filteredRows?.length ?? 0;
    }
    getValueAt(rowIndex, columnIndex) {
        const property = this.properties[columnIndex];
        let t = this.filteredRows[rowIndex];
        if (t instanceof TreeRow) {
            t = t.data;
        }
        if (t) {
            return this.getValueByT(t, property);
        }
        return "";
    }
    getFilteredRows() {
        return this.filteredRows;
    }
    getAllRows() {
        return this.rows;
    }
    getRowHeight(_rowIndex) {
        return this.defaultRowHeight;
    }
    getRowByIndex(rowIndex) {
        return this.filteredRows[rowIndex];
    }
    externalFilterChanged(predictFn) {
        this.filteredRows = (this.rows ? this.rows.filter(predictFn) : []);
    }
    doSort(sortItems) {
        for (const sortItem of sortItems) {
            const { columnIndex, sortState } = sortItem;
            const f = sortState === "asc" ? 1 :
                sortState === "desc" ? -1 : 0;
            const property = this.properties[columnIndex];
            this.filteredRows = this.filteredRows.sort(this.genericFlatTableSortComparator(property, f));
        }
        return true;
    }
    getValueByT(t, property) {
        if (property.includes(".")) {
            return this.getPropertyValue(t, property.split("."));
        }
        // @ts-ignore
        return t[property];
    }
    changeColumnOrder(sourceColumnIndex, targetColumnIndex) {
        this.arrayMove(this.properties, sourceColumnIndex, targetColumnIndex);
        super.changeColumnOrder(sourceColumnIndex, targetColumnIndex);
    }
    genericFlatTableSortComparator(property, f) {
        return (a, b) => {
            const va = this.getValueByT(a, property);
            const vb = this.getValueByT(b, property);
            return this.sorterService.genericSortComparator(va, vb, f);
        };
    }
    getPropertyValue(o, props) {
        const prop = props.shift();
        // @ts-ignore
        let o2 = o[prop];
        if (o2 && props.length) {
            return this.getPropertyValue(o2, props);
        }
        return o2;
    }
}
//# sourceMappingURL=data:application/json;base64,