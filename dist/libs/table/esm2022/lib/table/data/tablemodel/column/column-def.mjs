import { Size } from "../../common/size";
import { AreaObjectMap } from "../../common/area-map";
import { FalseFn, TrueFn } from "../../common/boolean-function";
export class ColumnDef {
    property;
    headerLabel;
    width;
    classes;
    rendererMap;
    minWidth;
    maxWidth;
    sortable;
    sortComparator;
    sortState;
    sortStatesOrder;
    sortIconVisible;
    editable;
    getEditRenderer;
    editInputPipe;
    isVisible;
    visible = true;
    constructor(property, headerLabel, width = new Size(100, "px"), classes = new AreaObjectMap(), rendererMap = new AreaObjectMap(), minWidth = new Size(100, "px"), maxWidth = new Size(100, "px"), sortable, sortComparator, sortState, sortStatesOrder, sortIconVisible, editable, getEditRenderer, editInputPipe, isVisible = () => this.visible) {
        this.property = property;
        this.headerLabel = headerLabel;
        this.width = width;
        this.classes = classes;
        this.rendererMap = rendererMap;
        this.minWidth = minWidth;
        this.maxWidth = maxWidth;
        this.sortable = sortable;
        this.sortComparator = sortComparator;
        this.sortState = sortState;
        this.sortStatesOrder = sortStatesOrder;
        this.sortIconVisible = sortIconVisible;
        this.editable = editable;
        this.getEditRenderer = getEditRenderer;
        this.editInputPipe = editInputPipe;
        this.isVisible = isVisible;
    }
    static bodyRenderer(bodyRenderer) {
        return new AreaObjectMap(undefined, bodyRenderer, undefined);
    }
    static create(param) {
        const am = new AreaObjectMap(param.headerRenderer, param.bodyRenderer, param.footerRenderer);
        const cm = new AreaObjectMap(param.headerClasses, param.bodyClasses, param.footerClasses);
        const sortIconVisible = param.sortIconVisible ?? param.sortable ?? FalseFn;
        const editable = param.editable ?? param.editable ?? FalseFn;
        const isVisible = param.isVisible ?? param.isVisible ?? TrueFn;
        return new ColumnDef(param.property ?? "", param.headerLabel ?? "", param.width ?? new Size(100, "px"), cm, am, param.minWidth ?? new Size(100, "px"), param.maxWidth ?? new Size(100, "px"), param.sortable, param.sortComparator, param.sortState, param.sortStatesOrder, sortIconVisible, editable, param.getEditRenderer, param.editInputPipe, isVisible);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWRlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdGFibGUvc3JjL2xpYi90YWJsZS9kYXRhL3RhYmxlbW9kZWwvY29sdW1uL2NvbHVtbi1kZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBS3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQW1CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQU1qRixNQUFNLE9BQU8sU0FBUztJQUtYO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBbEJGLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFFdEIsWUFDUyxRQUFnQixFQUNoQixXQUFtQixFQUNuQixRQUFnQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ25DLFVBQXVDLElBQUksYUFBYSxFQUFZLEVBQ3BFLGNBQWlELElBQUksYUFBYSxFQUFrQixFQUNwRixXQUFtQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ3RDLFdBQW1CLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDdEMsUUFBMEIsRUFDMUIsY0FBMEMsRUFDMUMsU0FBcUIsRUFDckIsZUFBNkIsRUFDN0IsZUFBaUMsRUFDakMsUUFBMEIsRUFDMUIsZUFBaUMsRUFDakMsYUFBNkIsRUFDN0IsWUFBNkIsR0FBRSxFQUFFLENBQUEsSUFBSSxDQUFDLE9BQU87UUFmN0MsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQUNuQixVQUFLLEdBQUwsS0FBSyxDQUE4QjtRQUNuQyxZQUFPLEdBQVAsT0FBTyxDQUE2RDtRQUNwRSxnQkFBVyxHQUFYLFdBQVcsQ0FBeUU7UUFDcEYsYUFBUSxHQUFSLFFBQVEsQ0FBOEI7UUFDdEMsYUFBUSxHQUFSLFFBQVEsQ0FBOEI7UUFDdEMsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7UUFDMUIsbUJBQWMsR0FBZCxjQUFjLENBQTRCO1FBQzFDLGNBQVMsR0FBVCxTQUFTLENBQVk7UUFDckIsb0JBQWUsR0FBZixlQUFlLENBQWM7UUFDN0Isb0JBQWUsR0FBZixlQUFlLENBQWtCO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBQzFCLG9CQUFlLEdBQWYsZUFBZSxDQUFrQjtRQUNqQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZ0I7UUFDN0IsY0FBUyxHQUFULFNBQVMsQ0FBb0M7SUFFdEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBNEI7UUFDOUMsT0FBTyxJQUFJLGFBQWEsQ0FDdEIsU0FBUyxFQUNULFlBQVksRUFDWixTQUFTLENBQ1YsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLEtBcUJiO1FBRUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxhQUFhLENBQzFCLEtBQUssQ0FBQyxjQUFjLEVBQ3BCLEtBQUssQ0FBQyxZQUFZLEVBQ2xCLEtBQUssQ0FBQyxjQUFjLENBQ3JCLENBQUM7UUFFRixNQUFNLEVBQUUsR0FBRyxJQUFJLGFBQWEsQ0FDMUIsS0FBSyxDQUFDLGFBQWEsRUFDbkIsS0FBSyxDQUFDLFdBQVcsRUFDakIsS0FBSyxDQUFDLGFBQWEsQ0FDcEIsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUM7UUFDM0UsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQztRQUM3RCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxJQUFJLEtBQUssQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDO1FBRS9ELE9BQU8sSUFBSSxTQUFTLENBQ2xCLEtBQUssQ0FBQyxRQUFRLElBQUksRUFBRSxFQUNwQixLQUFLLENBQUMsV0FBVyxJQUFJLEVBQUUsRUFDdkIsS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ2xDLEVBQUUsRUFDRixFQUFFLEVBQ0YsS0FBSyxDQUFDLFFBQVEsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ3JDLEtBQUssQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUNyQyxLQUFLLENBQUMsUUFBUSxFQUNkLEtBQUssQ0FBQyxjQUFjLEVBQ3BCLEtBQUssQ0FBQyxTQUFTLEVBQ2YsS0FBSyxDQUFDLGVBQWUsRUFDckIsZUFBZSxFQUNmLFFBQVEsRUFDUixLQUFLLENBQUMsZUFBZSxFQUNyQixLQUFLLENBQUMsYUFBYSxFQUNuQixTQUFTLENBQ1YsQ0FBQztJQUNKLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpemUgfSBmcm9tIFwiLi4vLi4vY29tbW9uL3NpemVcIjtcbmltcG9ydCB7IFNpemVJZiB9IGZyb20gXCIuLi8uLi9jb21tb24vc2l6ZS5pZlwiO1xuaW1wb3J0IHsgQ29sdW1uRGVmSWYgfSBmcm9tIFwiLi9jb2x1bW4tZGVmLmlmXCI7XG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJJZiB9IGZyb20gXCIuLi8uLi8uLi9yZW5kZXJlci9jZWxsLXJlbmRlci5pZlwiO1xuaW1wb3J0IHsgQXJlYU9iamVjdE1hcFR5cGUgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2FyZWEtbWFwLnR5cGVcIjtcbmltcG9ydCB7IEFyZWFPYmplY3RNYXAgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2FyZWEtbWFwXCI7XG5pbXBvcnQgeyBCb29sZWFuRnVuY3Rpb24sIEZhbHNlRm4sIFRydWVGbiB9IGZyb20gXCIuLi8uLi9jb21tb24vYm9vbGVhbi1mdW5jdGlvblwiO1xuaW1wb3J0IHsgU29ydFN0YXRlIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9zb3J0LXN0YXRlLnR5cGVcIjtcbmltcG9ydCB7IEdldEVkaXRSZW5kZXJlciB9IGZyb20gXCIuLi8uLi8uLi9yZW5kZXJlci9lZGl0L2VkaXQtY2VsbC1yZW5kZXJlci50eXBlXCI7XG5pbXBvcnQgeyBlZGl0SW5wdXRQaXBlIH0gZnJvbSBcIi4uLy4uLy4uL3JlbmRlcmVyL2VkaXQvZWRpdC1pbnB1dC1waXBlLmlmXCI7XG5cblxuZXhwb3J0IGNsYXNzIENvbHVtbkRlZiBpbXBsZW1lbnRzIENvbHVtbkRlZklmIHtcblxuICBwdWJsaWMgdmlzaWJsZSA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHByb3BlcnR5OiBzdHJpbmcsXG4gICAgcHVibGljIGhlYWRlckxhYmVsOiBzdHJpbmcsXG4gICAgcHVibGljIHdpZHRoOiBTaXplSWYgPSBuZXcgU2l6ZSgxMDAsIFwicHhcIiksXG4gICAgcHVibGljIGNsYXNzZXM6IEFyZWFPYmplY3RNYXBUeXBlPHN0cmluZ1tdPiA9IG5ldyBBcmVhT2JqZWN0TWFwPHN0cmluZ1tdPigpLFxuICAgIHB1YmxpYyByZW5kZXJlck1hcDogQXJlYU9iamVjdE1hcFR5cGU8Q2VsbFJlbmRlcmVySWY+ID0gbmV3IEFyZWFPYmplY3RNYXA8Q2VsbFJlbmRlcmVySWY+KCksXG4gICAgcHVibGljIG1pbldpZHRoOiBTaXplSWYgPSBuZXcgU2l6ZSgxMDAsIFwicHhcIiksXG4gICAgcHVibGljIG1heFdpZHRoOiBTaXplSWYgPSBuZXcgU2l6ZSgxMDAsIFwicHhcIiksXG4gICAgcHVibGljIHNvcnRhYmxlPzogQm9vbGVhbkZ1bmN0aW9uLFxuICAgIHB1YmxpYyBzb3J0Q29tcGFyYXRvcj86IDxUPihhOiBULCBiOiBUKSA9PiBudW1iZXIsXG4gICAgcHVibGljIHNvcnRTdGF0ZT86IFNvcnRTdGF0ZSxcbiAgICBwdWJsaWMgc29ydFN0YXRlc09yZGVyPzogU29ydFN0YXRlW10sXG4gICAgcHVibGljIHNvcnRJY29uVmlzaWJsZT86IEJvb2xlYW5GdW5jdGlvbixcbiAgICBwdWJsaWMgZWRpdGFibGU/OiBCb29sZWFuRnVuY3Rpb24sXG4gICAgcHVibGljIGdldEVkaXRSZW5kZXJlcj86IEdldEVkaXRSZW5kZXJlcixcbiAgICBwdWJsaWMgZWRpdElucHV0UGlwZT86IGVkaXRJbnB1dFBpcGUsXG4gICAgcHVibGljIGlzVmlzaWJsZTogQm9vbGVhbkZ1bmN0aW9uID0gKCk9PnRoaXMudmlzaWJsZVxuICApIHtcbiAgfVxuXG4gIHN0YXRpYyBib2R5UmVuZGVyZXIoYm9keVJlbmRlcmVyOiBDZWxsUmVuZGVyZXJJZikge1xuICAgIHJldHVybiBuZXcgQXJlYU9iamVjdE1hcDxDZWxsUmVuZGVyZXJJZj4oXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBib2R5UmVuZGVyZXIsXG4gICAgICB1bmRlZmluZWRcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShwYXJhbToge1xuICAgIHByb3BlcnR5Pzogc3RyaW5nLFxuICAgIGhlYWRlckxhYmVsPzogc3RyaW5nLFxuICAgIHdpZHRoPzogU2l6ZUlmLFxuICAgIG1pbldpZHRoPzogU2l6ZUlmLFxuICAgIG1heFdpZHRoPzogU2l6ZUlmLFxuICAgIGhlYWRlclJlbmRlcmVyPzogQ2VsbFJlbmRlcmVySWYsXG4gICAgYm9keVJlbmRlcmVyPzogQ2VsbFJlbmRlcmVySWYsXG4gICAgZm9vdGVyUmVuZGVyZXI/OiBDZWxsUmVuZGVyZXJJZixcbiAgICBoZWFkZXJDbGFzc2VzPzogc3RyaW5nW11cbiAgICBib2R5Q2xhc3Nlcz86IHN0cmluZ1tdXG4gICAgZm9vdGVyQ2xhc3Nlcz86IHN0cmluZ1tdLFxuICAgIHNvcnRhYmxlPzogQm9vbGVhbkZ1bmN0aW9uLFxuICAgIHNvcnRJY29uVmlzaWJsZT86IEJvb2xlYW5GdW5jdGlvbixcbiAgICBzb3J0Q29tcGFyYXRvcj86IDxUPihhOiBULCBiOiBUKSA9PiBudW1iZXIsXG4gICAgc29ydFN0YXRlPzogU29ydFN0YXRlLFxuICAgIHNvcnRTdGF0ZXNPcmRlcj86IFNvcnRTdGF0ZVtdLFxuICAgIGVkaXRhYmxlPzogQm9vbGVhbkZ1bmN0aW9uLFxuICAgIGlzVmlzaWJsZT86IEJvb2xlYW5GdW5jdGlvbixcbiAgICBnZXRFZGl0UmVuZGVyZXI/OiBHZXRFZGl0UmVuZGVyZXIsXG4gICAgZWRpdElucHV0UGlwZT86IGVkaXRJbnB1dFBpcGUsXG4gIH0pOiBDb2x1bW5EZWZJZiB7XG5cbiAgICBjb25zdCBhbSA9IG5ldyBBcmVhT2JqZWN0TWFwPENlbGxSZW5kZXJlcklmPihcbiAgICAgIHBhcmFtLmhlYWRlclJlbmRlcmVyLFxuICAgICAgcGFyYW0uYm9keVJlbmRlcmVyLFxuICAgICAgcGFyYW0uZm9vdGVyUmVuZGVyZXJcbiAgICApO1xuXG4gICAgY29uc3QgY20gPSBuZXcgQXJlYU9iamVjdE1hcDxzdHJpbmdbXT4oXG4gICAgICBwYXJhbS5oZWFkZXJDbGFzc2VzLFxuICAgICAgcGFyYW0uYm9keUNsYXNzZXMsXG4gICAgICBwYXJhbS5mb290ZXJDbGFzc2VzXG4gICAgKTtcblxuICAgIGNvbnN0IHNvcnRJY29uVmlzaWJsZSA9IHBhcmFtLnNvcnRJY29uVmlzaWJsZSA/PyBwYXJhbS5zb3J0YWJsZSA/PyBGYWxzZUZuO1xuICAgIGNvbnN0IGVkaXRhYmxlID0gcGFyYW0uZWRpdGFibGUgPz8gcGFyYW0uZWRpdGFibGUgPz8gRmFsc2VGbjtcbiAgICBjb25zdCBpc1Zpc2libGUgPSBwYXJhbS5pc1Zpc2libGUgPz8gcGFyYW0uaXNWaXNpYmxlID8/IFRydWVGbjtcblxuICAgIHJldHVybiBuZXcgQ29sdW1uRGVmKFxuICAgICAgcGFyYW0ucHJvcGVydHkgPz8gXCJcIixcbiAgICAgIHBhcmFtLmhlYWRlckxhYmVsID8/IFwiXCIsXG4gICAgICBwYXJhbS53aWR0aCA/PyBuZXcgU2l6ZSgxMDAsIFwicHhcIiksXG4gICAgICBjbSxcbiAgICAgIGFtLFxuICAgICAgcGFyYW0ubWluV2lkdGggPz8gbmV3IFNpemUoMTAwLCBcInB4XCIpLFxuICAgICAgcGFyYW0ubWF4V2lkdGggPz8gbmV3IFNpemUoMTAwLCBcInB4XCIpLFxuICAgICAgcGFyYW0uc29ydGFibGUsXG4gICAgICBwYXJhbS5zb3J0Q29tcGFyYXRvcixcbiAgICAgIHBhcmFtLnNvcnRTdGF0ZSxcbiAgICAgIHBhcmFtLnNvcnRTdGF0ZXNPcmRlcixcbiAgICAgIHNvcnRJY29uVmlzaWJsZSxcbiAgICAgIGVkaXRhYmxlLFxuICAgICAgcGFyYW0uZ2V0RWRpdFJlbmRlcmVyLFxuICAgICAgcGFyYW0uZWRpdElucHV0UGlwZSxcbiAgICAgIGlzVmlzaWJsZSxcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==