import { CellgroupFactory } from "../cellgroup/cellgroup-factory";
import { CellGroupExtCellRenderer } from "../../../renderer/cell-group-ext-cell-renderer";
// TODO next steps:   fix this model
export class AreaModelCellGroups {
    areaIdent;
    groups;
    columnDefs;
    defaultRowHeight;
    gammaCells = true;
    rowSelectionModel;
    arr;
    groupExts = [];
    cellGroupExtCellRenderer = new CellGroupExtCellRenderer();
    constructor(areaIdent = "header", groups, columnDefs = [], defaultRowHeight) {
        this.areaIdent = areaIdent;
        this.groups = groups;
        this.columnDefs = columnDefs;
        this.defaultRowHeight = defaultRowHeight;
        this.groupExts = CellgroupFactory.buildGroupExts(groups);
        console.info(this.groupExts);
        console.info(this.getAllLeafs());
        console.info(this.getMaxRowCount());
        for (const g of this.groupExts) {
            g.log(this.getMaxRowCount());
            //console.info(g.getAllRowCounts(g));
        }
        this.arr = this.buildArray();
        if (!this.columnDefs?.length && areaIdent === "header") {
            this.columnDefs = CellgroupFactory.buildColumnDefs(groups);
        }
        console.info('this.columnDefs', this.columnDefs);
        console.info('this.arr', this.arr);
    }
    getAllLeafs() {
        const flatten = CellgroupFactory.flattenGroupExts(this.groupExts);
        return flatten.filter(ge => !ge.children);
    }
    getMaxRowCount() {
        const allLeafs = this.getAllLeafs();
        if (allLeafs?.length) {
            return 1 + Math.max(...allLeafs.map(c => c.getParentCount(c)));
        }
        return 0;
    }
    buildArray() {
        console.info("");
        let flatten = CellgroupFactory.flattenGroupExts(this.groupExts);
        // console.info("flat", flatten);
        const maxCol = flatten.length;
        const maxRow = 1 + Math.max(...flatten.map(c => c.rowIndex));
        console.info("max  row/col:", maxRow + "/" + maxCol);
        const sb = [];
        CellgroupFactory.iterateThrowColumns(sb, this.groupExts);
        console.info(sb);
        const arrs = Array.from(Array(maxRow).keys()).map((_r) => []);
        let ret = CellgroupFactory.buildArrayOfArrays(flatten, arrs);
        console.table(ret);
        /*
    
    Gold                                                Hohenwarte
    Gold AB              Gold CD                        HOH AB                      HOH CD
    Gold A     Gold B    Gold C   Gold D    Gold Sum    HOH Loc    HOH A    HOH B   HOH C    HOH D
    
    */
        return ret;
    }
    changeColumnOrder(_sourceColumnIndex, _targetColumnIndex) {
        // skip
    }
    doSort(_sortItems) {
        return false;
    }
    externalFilterChanged(_predictFn) {
        // skip
    }
    getCellRenderer(_rowIndex, _columnIndex) {
        return this.cellGroupExtCellRenderer;
    }
    getColspanAt(rowIndex, columnIndex) {
        // let ret = 1;
        //
        // if (this.getValueAt(rowIndex, columnIndex)){
        //   const maxCol = this.arr[0].length;
        //   while (ret< maxCol && this.getValueAt(rowIndex, columnIndex + ret)===null){
        //     ret++;
        //   }
        // }
        // return ret;
        const val = this.getValueAt(rowIndex, columnIndex);
        if (val) {
            return val.getColumnCount();
        }
        return 0;
    }
    getCustomClassesAt(_rowIndex, _columnIndex) {
        return [];
    }
    getCustomStyleAt(_rowIndex, _columnIndex) {
        return undefined;
    }
    getMaxColspan() {
        return 12;
    }
    getMaxRowspan() {
        return 12;
    }
    getRowByIndex(_rowIndex) {
        return undefined;
    }
    getRowCount() {
        if (this.arr) {
            return this.arr.length;
        }
        return 0;
    }
    getRowspanAt(rowIndex, columnIndex) {
        // TODO
        const cge = this.getValueAt(rowIndex, columnIndex);
        if (cge) {
            const maxRowCount = this.getRowCount();
            return cge.getRowSpan(cge, maxRowCount);
        }
        return 0;
    }
    getTooltipAt(_rowIndex, _columnIndex) {
        // TODO
        return "";
    }
    getValueAt(rowIndex, columnIndex) {
        return this.arr[rowIndex][columnIndex];
    }
    getYPosByRowIndex(_rowIndex) {
        // TODO
        return 0;
    }
    init() {
    }
    getRowHeight(_rowIndex) {
        return this.defaultRowHeight;
    }
    isEditable(_rowIndex, _columnIndex) {
        return false;
    }
    isFilterable() {
        return false;
    }
    isRowCheckable(_rowIndex) {
        return false;
    }
    isRowChecked(_rowIndex) {
        return undefined;
    }
    isSelectable(_rowIndex, _columnIndex) {
        return false;
    }
    setRowChecked(_rowIndex, _checked) {
        // skipped
    }
    setValue(_rowIndex, _columnIndex, _value) {
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,