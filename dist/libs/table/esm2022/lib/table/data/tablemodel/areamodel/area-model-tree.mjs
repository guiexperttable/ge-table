import { TreeRowService } from "../../../service/tree-row.service";
import { AbstractAreaModel } from "./abstract-area-model";
import { SorterService } from "../../../service/sorter.service";
export class AreaModelTree extends AbstractAreaModel {
    areaIdent;
    rows;
    defaultRowHeight;
    columnDefs;
    properties;
    sorterService = new SorterService();
    service = new TreeRowService();
    filteredFlattenRows;
    flattenRows;
    lastPredictFn;
    constructor(areaIdent, rows, defaultRowHeight, columnDefs = []) {
        super(areaIdent, columnDefs, defaultRowHeight);
        this.areaIdent = areaIdent;
        this.rows = rows;
        this.defaultRowHeight = defaultRowHeight;
        this.columnDefs = columnDefs;
        this.properties = columnDefs.map(def => def.property);
        this.flattenRows = this.service.flattenTree(rows);
        this.filteredFlattenRows = [...this.flattenRows];
    }
    changeColumnOrder(sourceColumnIndex, targetColumnIndex) {
        //  not this! this.arrayMove(this.columnDefs...)
        this.arrayMove(this.properties, sourceColumnIndex, targetColumnIndex);
        super.changeColumnOrder(sourceColumnIndex, targetColumnIndex);
    }
    recalcVisibleTreeRows() {
        this.filteredFlattenRows = this.service.flattenTree(this.rows);
    }
    getFilteredFlattenRows() {
        return this.filteredFlattenRows;
    }
    getRowCount() {
        let n = 0;
        for (const r of this.filteredFlattenRows) {
            if (this.service.isVisible(r)) {
                n++;
            }
        }
        return n;
    }
    getValueAt(rowIndex, columnIndex) {
        const row = this.getRowByIndex(rowIndex);
        if (row) {
            const prop = this.properties[columnIndex];
            if (prop) {
                if (prop.includes(".")) {
                    return this.getPropertyValue(row.data, prop.split("."));
                }
                // @ts-ignore
                return row.data[prop];
            }
        }
        return "";
    }
    getRowHeight(_rowIndex) {
        return this.defaultRowHeight;
    }
    getCustomClassesAt(rowIndex, _columnIndex) {
        const row = this.filteredFlattenRows[rowIndex];
        return ["ge-table-tree-cell", "ge-table-tree-deep-" + row.deep];
    }
    getRowByIndex(idx) {
        return this.filteredFlattenRows[idx];
    }
    getValueByT(t, property) {
        if (property.includes(".")) {
            return this.getPropertyValue(t, property.split("."));
        }
        // @ts-ignore
        return t[property];
    }
    externalFilterChanged(predictFn) {
        this.lastPredictFn = predictFn;
        this.doFiltering();
    }
    doSort(sortItems) {
        const { columnIndex, sortState } = sortItems[sortItems.length - 1];
        const f = sortState === "asc" ? 1 :
            sortState === "desc" ? -1 : 0;
        const property = this.properties[columnIndex];
        this.treeSort(this.rows, property, f);
        this.flattenRows = this.service.flattenTree(this.rows);
        this.filteredFlattenRows = [...this.flattenRows];
        return true;
    }
    toggleExpandCollapseAll(expanded) {
        this.expandAllRecursive(this.rows, expanded);
        this.flattenRows = this.service.flattenTree(this.rows);
        this.doFiltering();
    }
    setAllParentsOk(item) {
        if (item.parent) {
            item.parent.keep = true;
            this.setAllParentsOk(item.parent);
        }
        return false;
    }
    setValue(rowIndex, columnIndex, value) {
        const editInputPipe = this.columnDefs[columnIndex]?.editInputPipe;
        if (editInputPipe) {
            value = editInputPipe(value, rowIndex, columnIndex);
        }
        const treeRow = this.getRowByIndex(rowIndex);
        if (treeRow) {
            const row = treeRow.data;
            const property = this.columnDefs[columnIndex].property;
            if (property.includes(".")) {
                return this.setPropertyValue(row, property.split("."), value);
            }
            // @ts-ignore
            row[property] = value;
            return true;
        }
        return false;
    }
    genericTreeTableSortComparator(property, f) {
        return (a, b) => {
            const va = this.getValueByT(a.data, property);
            const vb = this.getValueByT(b.data, property);
            return this.sorterService.genericSortComparator(va, vb, f);
        };
    }
    expandAllRecursive(arr, expanded) {
        for (const row of arr) {
            row.expanded = expanded;
            if (row.children) {
                this.expandAllRecursive(row.children, expanded);
            }
        }
    }
    doFiltering() {
        if (!this.lastPredictFn) {
            this.filteredFlattenRows = [...(this.flattenRows ? this.flattenRows : [])];
        }
        else {
            if (!this.flattenRows) {
                this.flattenRows = [];
            }
            let maxDeep = 0;
            this.flattenRows.forEach(v => {
                maxDeep = Math.max(maxDeep, v.deep);
            });
            const okRows = this.flattenRows.filter((value, index, array) => {
                // @ts-ignore
                return this.lastPredictFn(value, index, array);
            });
            this.flattenRows.forEach(v => v.keep = false);
            this.flattenRows.forEach(v => {
                if (okRows.includes(v)) {
                    v.keep = true;
                    this.setAllParentsOk(v);
                }
            });
            this.filteredFlattenRows = this.flattenRows.filter((value, _index, _array) => {
                return value.keep;
            });
        }
    }
    getPropertyValue(o, props) {
        const prop = props.shift();
        // @ts-ignore
        let o2 = o[prop];
        if (o2 && props.length) {
            return this.getPropertyValue(o2, props);
        }
        return o2;
    }
    treeSort(rows, property, f) {
        rows.sort(this.genericTreeTableSortComparator(property, f));
        for (const row of rows) {
            if (row.children) {
                this.treeSort(row.children, property, f);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,