import { CellRange } from "../../common/cell-range";
export class ColAndRowspanModel {
    tableModel;
    areaModel;
    colAndRowspanRanges = undefined;
    constructor(tableModel, areaModel) {
        this.tableModel = tableModel;
        this.areaModel = areaModel;
    }
    init() {
        if (this.areaModel.getMaxColspan() < 2 && this.areaModel.getMaxRowspan() < 2) {
            return; // sip
        }
        this.colAndRowspanRanges = [];
        const rowCount = this.areaModel.getRowCount();
        const colCount = this.tableModel.getColumnCount();
        for (let r = 0; r < rowCount; r++) {
            for (let c = 0; c < colCount; c++) {
                let cs = this.areaModel.getColspanAt(r, c);
                let rs = this.areaModel.getRowspanAt(r, c);
                if (cs > 1 || rs > 1) {
                    if (cs === 0) {
                        cs = 1;
                    }
                    if (rs === 0) {
                        rs = 1;
                    }
                    const gammaRange = this.areaModel.hasOwnProperty('gammaCells');
                    this.colAndRowspanRanges.push(new CellRange(r, c, r + rs - 1, c + cs - 1, gammaRange));
                }
            }
        }
    }
    getRanges() {
        if (this.colAndRowspanRanges) {
            return this.colAndRowspanRanges;
        }
        return [];
    }
    isInRange(rowIndex, columnIndex) {
        if (this.colAndRowspanRanges) {
            for (const range of this.colAndRowspanRanges) {
                if (range.isInRange(rowIndex, columnIndex)) {
                    return true;
                }
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sLWFuZC1yb3dzcGFuLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy90YWJsZS9zcmMvbGliL3RhYmxlL2RhdGEvdGFibGVtb2RlbC9hcmVhbW9kZWwvY29sLWFuZC1yb3dzcGFuLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUlwRCxNQUFNLE9BQU8sa0JBQWtCO0lBS2pCO0lBQ0E7SUFKRixtQkFBbUIsR0FBNEIsU0FBUyxDQUFDO0lBRW5FLFlBQ1ksVUFBd0IsRUFDeEIsU0FBc0I7UUFEdEIsZUFBVSxHQUFWLFVBQVUsQ0FBYztRQUN4QixjQUFTLEdBQVQsU0FBUyxDQUFhO0lBRWxDLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUM1RSxPQUFPLENBQUMsTUFBTTtTQUNmO1FBQ0QsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztRQUM5QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzlDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDbEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7b0JBQ3BCLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTt3QkFDWixFQUFFLEdBQUcsQ0FBQyxDQUFDO3FCQUNSO29CQUNELElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTt3QkFDWixFQUFFLEdBQUcsQ0FBQyxDQUFDO3FCQUNSO29CQUVELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUMvRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUMzQixJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUN4RCxDQUFDO2lCQUNIO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7U0FDakM7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxTQUFTLENBQUMsUUFBZ0IsRUFBRSxXQUFtQjtRQUM3QyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUM1QixLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtnQkFDNUMsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDMUMsT0FBTyxJQUFJLENBQUM7aUJBQ2I7YUFDRjtTQUNGO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZWxsUmFuZ2UgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NlbGwtcmFuZ2VcIjtcbmltcG9ydCB7IEFyZWFNb2RlbElmIH0gZnJvbSBcIi4vYXJlYS1tb2RlbC5pZlwiO1xuaW1wb3J0IHsgVGFibGVNb2RlbElmIH0gZnJvbSBcIi4uL3RhYmxlLW1vZGVsLmlmXCI7XG5cbmV4cG9ydCBjbGFzcyBDb2xBbmRSb3dzcGFuTW9kZWwge1xuXG4gIHByb3RlY3RlZCBjb2xBbmRSb3dzcGFuUmFuZ2VzOiBDZWxsUmFuZ2VbXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdGFibGVNb2RlbDogVGFibGVNb2RlbElmLFxuICAgIHByb3RlY3RlZCBhcmVhTW9kZWw6IEFyZWFNb2RlbElmXG4gICkge1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBpZiAodGhpcy5hcmVhTW9kZWwuZ2V0TWF4Q29sc3BhbigpIDwgMiAmJiB0aGlzLmFyZWFNb2RlbC5nZXRNYXhSb3dzcGFuKCkgPCAyKSB7XG4gICAgICByZXR1cm47IC8vIHNpcFxuICAgIH1cbiAgICB0aGlzLmNvbEFuZFJvd3NwYW5SYW5nZXMgPSBbXTtcbiAgICBjb25zdCByb3dDb3VudCA9IHRoaXMuYXJlYU1vZGVsLmdldFJvd0NvdW50KCk7XG4gICAgY29uc3QgY29sQ291bnQgPSB0aGlzLnRhYmxlTW9kZWwuZ2V0Q29sdW1uQ291bnQoKTtcbiAgICBmb3IgKGxldCByID0gMDsgciA8IHJvd0NvdW50OyByKyspIHtcbiAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY29sQ291bnQ7IGMrKykge1xuICAgICAgICBsZXQgY3MgPSB0aGlzLmFyZWFNb2RlbC5nZXRDb2xzcGFuQXQociwgYyk7XG4gICAgICAgIGxldCBycyA9IHRoaXMuYXJlYU1vZGVsLmdldFJvd3NwYW5BdChyLCBjKTtcbiAgICAgICAgaWYgKGNzID4gMSB8fCBycyA+IDEpIHtcbiAgICAgICAgICBpZiAoY3MgPT09IDApIHtcbiAgICAgICAgICAgIGNzID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJzID09PSAwKSB7XG4gICAgICAgICAgICBycyA9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZ2FtbWFSYW5nZSA9IHRoaXMuYXJlYU1vZGVsLmhhc093blByb3BlcnR5KCdnYW1tYUNlbGxzJyk7XG4gICAgICAgICAgdGhpcy5jb2xBbmRSb3dzcGFuUmFuZ2VzLnB1c2goXG4gICAgICAgICAgICBuZXcgQ2VsbFJhbmdlKHIsIGMsIHIgKyBycyAtIDEsIGMgKyBjcyAtIDEsIGdhbW1hUmFuZ2UpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFJhbmdlcygpOiBDZWxsUmFuZ2VbXSB7XG4gICAgaWYgKHRoaXMuY29sQW5kUm93c3BhblJhbmdlcykge1xuICAgICAgcmV0dXJuIHRoaXMuY29sQW5kUm93c3BhblJhbmdlcztcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaXNJblJhbmdlKHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbkluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5jb2xBbmRSb3dzcGFuUmFuZ2VzKSB7XG4gICAgICBmb3IgKGNvbnN0IHJhbmdlIG9mIHRoaXMuY29sQW5kUm93c3BhblJhbmdlcykge1xuICAgICAgICBpZiAocmFuZ2UuaXNJblJhbmdlKHJvd0luZGV4LCBjb2x1bW5JbmRleCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxufVxuIl19