export class AbstractAreaModel {
    areaIdent;
    columnDefs;
    defaultRowHeight;
    rowSelectionModel = undefined;
    cellRenderers;
    yPositions = [];
    constructor(areaIdent, columnDefs = [], defaultRowHeight = -1) {
        this.areaIdent = areaIdent;
        this.columnDefs = columnDefs;
        this.defaultRowHeight = defaultRowHeight;
        this.cellRenderers = columnDefs.map(def => def.rendererMap[areaIdent]);
    }
    getTooltipAt(_rowIndex, _columnIndex) {
        return "";
    }
    ;
    getCellRenderer(_rowIndex, columnIndex) {
        if (columnIndex < this.cellRenderers.length) {
            return this.cellRenderers[columnIndex];
        }
        return undefined;
    }
    getColspanAt(_rowIndex, _columnIndex) {
        return 0;
    }
    getCustomClassesAt(_rowIndex, _columnIndex) {
        return [];
    }
    getCustomStyleAt(_rowIndex, _columnIndex) {
        return undefined;
    }
    getRowspanAt(_rowIndex, _columnIndex) {
        return 0;
    }
    getRowByIndex(_rowIndex) {
        return undefined;
    }
    isRowCheckable(_rowIndex) {
        return true;
    }
    isRowChecked(rowIndex) {
        const row = this.getRowByIndex(rowIndex);
        return this.rowSelectionModel?.isRowChecked(row);
    }
    setRowChecked(rowIndex, checked) {
        if (this.rowSelectionModel) {
            const row = this.getRowByIndex(rowIndex);
            this.rowSelectionModel.checkRow(row, checked);
        }
    }
    getMaxColspan() {
        return 31;
    }
    getMaxRowspan() {
        return 31;
    }
    getYPosByRowIndex(rowIndex) {
        if (this.defaultRowHeight > 0) {
            return this.defaultRowHeight * rowIndex;
        }
        return this.yPositions[rowIndex];
    }
    init() {
        if (!this.yPositions.length && this.getRowCount() !== undefined) {
            if (this.defaultRowHeight === -1) {
                this.calcYPositions();
            }
        }
    }
    isFilterable() {
        return this.areaIdent === "body";
    }
    doSort(_sortItems) {
        // do nothing
        return false;
    }
    isEditable(_rowIndex, columnIndex) {
        if (this.columnDefs
            && columnIndex < this.columnDefs.length
            && this.columnDefs[columnIndex].editable) {
            // @ts-ignore
            return this.columnDefs[columnIndex].editable();
        }
        return false;
    }
    setValue(rowIndex, columnIndex, value) {
        const editInputPipe = this.columnDefs[columnIndex]?.editInputPipe;
        if (editInputPipe) {
            value = editInputPipe(value, rowIndex, columnIndex);
        }
        const row = this.getRowByIndex(rowIndex);
        const property = this.columnDefs[columnIndex].property;
        if (property.includes(".")) {
            return this.setPropertyValue(row, property.split("."), value);
        }
        // @ts-ignore
        row[property] = value;
        return true;
    }
    isSelectable(_rowIndex, _columnIndex) {
        return true;
    }
    changeColumnOrder(sourceColumnIndex, targetColumnIndex) {
        //  not this! this.arrayMove(this.columnDefs...)
        this.arrayMove(this.cellRenderers, sourceColumnIndex, targetColumnIndex);
    }
    setPropertyValue(o, props, value) {
        const prop = props.shift();
        if (prop) {
            // @ts-ignore
            let o2 = o[prop];
            if (o2 && props.length) {
                return this.setPropertyValue(o2, props, value);
            }
            else {
                o[prop] = value;
                return true;
            }
        }
        return false;
    }
    arrayMove(arr, fromIndex, toIndex) {
        const element = arr.splice(fromIndex, 1)[0];
        arr.splice(toIndex, 0, element);
        return arr;
    }
    calcYPositions() {
        const rowCount = this.getRowCount();
        this.yPositions = new Array(rowCount + 1);
        this.yPositions[0] = 0;
        for (let i = 0; i < rowCount; i++) {
            this.yPositions[i + 1] = this.getRowHeight(i) + this.yPositions[i];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,