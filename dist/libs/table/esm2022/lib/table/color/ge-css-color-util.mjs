import { TwoColorGradientArg } from "./two-color-gradient-arg";
export class GeCssColorUtil {
    static normalize(value, fromSource, toSource, fromTarget = 0, toTarget = 1) {
        return (value - fromSource) / (toSource - fromSource) * (toTarget - fromTarget) + fromTarget;
    }
    static getTwoColorGradientRGB(value, para) {
        const factor = GeCssColorUtil.normalize(value, para.minValue, para.maxValue, 0, 1);
        const diffRed = para.maxColor.r - para.minColor.r;
        const diffGreen = para.maxColor.g - para.minColor.g;
        const diffBlue = para.maxColor.b - para.minColor.b;
        const r = (diffRed * factor) + para.minColor.r;
        const g = (diffGreen * factor) + para.minColor.g;
        const b = (diffBlue * factor) + para.minColor.b;
        return `rgb(${Math.round(r)}, ${Math.round(g)}, ${Math.round(b)})`;
    }
    static getThreeColorGradientRGB(value, para) {
        if (value < para.middleValue) {
            return GeCssColorUtil.getTwoColorGradientRGB(value, new TwoColorGradientArg(para.minValue, para.minColor, para.middleValue, para.middleColor));
        }
        if (value > para.middleValue) {
            return GeCssColorUtil.getTwoColorGradientRGB(value, new TwoColorGradientArg(para.middleValue, para.middleColor, para.maxValue, para.maxColor));
        }
        return `rgb(${para.middleColor.r}, ${para.middleColor.g}, ${para.middleColor.b})`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2UtY3NzLWNvbG9yLXV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RhYmxlL3NyYy9saWIvdGFibGUvY29sb3IvZ2UtY3NzLWNvbG9yLXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFL0QsTUFBTSxPQUFPLGNBQWM7SUFHekIsTUFBTSxDQUFDLFNBQVMsQ0FDZCxLQUFhLEVBQ2IsVUFBa0IsRUFDbEIsUUFBZ0IsRUFDaEIsYUFBcUIsQ0FBQyxFQUN0QixXQUFtQixDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDO0lBQy9GLENBQUM7SUFHRCxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBYSxFQUFFLElBQTJCO1FBQ3RFLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFbkYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDcEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFbkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFaEQsT0FBTyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDckUsQ0FBQztJQUdELE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFhLEVBQUUsSUFBNkI7UUFDMUUsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUM1QixPQUFPLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUNoSjtRQUNELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDNUIsT0FBTyxjQUFjLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDaEo7UUFDRCxPQUFPLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNwRixDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUd29Db2xvckdyYWRpZW50QXJnSWYgfSBmcm9tIFwiLi90d28tY29sb3ItZ3JhZGllbnQtYXJnLmlmXCI7XG5pbXBvcnQgeyBUaHJlZUNvbG9yR3JhZGllbnRBcmdJZiB9IGZyb20gXCIuL3RocmVlLWNvbG9yLWdyYWRpZW50LWFyZy5pZlwiO1xuaW1wb3J0IHsgVHdvQ29sb3JHcmFkaWVudEFyZyB9IGZyb20gXCIuL3R3by1jb2xvci1ncmFkaWVudC1hcmdcIjtcblxuZXhwb3J0IGNsYXNzIEdlQ3NzQ29sb3JVdGlsIHtcblxuXG4gIHN0YXRpYyBub3JtYWxpemUoXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICBmcm9tU291cmNlOiBudW1iZXIsXG4gICAgdG9Tb3VyY2U6IG51bWJlcixcbiAgICBmcm9tVGFyZ2V0OiBudW1iZXIgPSAwLFxuICAgIHRvVGFyZ2V0OiBudW1iZXIgPSAxKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAtIGZyb21Tb3VyY2UpIC8gKHRvU291cmNlIC0gZnJvbVNvdXJjZSkgKiAodG9UYXJnZXQgLSBmcm9tVGFyZ2V0KSArIGZyb21UYXJnZXQ7XG4gIH1cblxuXG4gIHN0YXRpYyBnZXRUd29Db2xvckdyYWRpZW50UkdCKHZhbHVlOiBudW1iZXIsIHBhcmE6IFR3b0NvbG9yR3JhZGllbnRBcmdJZik6IHN0cmluZyB7XG4gICAgY29uc3QgZmFjdG9yID0gR2VDc3NDb2xvclV0aWwubm9ybWFsaXplKHZhbHVlLCBwYXJhLm1pblZhbHVlLCBwYXJhLm1heFZhbHVlLCAwLCAxKTtcblxuICAgIGNvbnN0IGRpZmZSZWQgPSBwYXJhLm1heENvbG9yLnIgLSBwYXJhLm1pbkNvbG9yLnI7XG4gICAgY29uc3QgZGlmZkdyZWVuID0gcGFyYS5tYXhDb2xvci5nIC0gcGFyYS5taW5Db2xvci5nO1xuICAgIGNvbnN0IGRpZmZCbHVlID0gcGFyYS5tYXhDb2xvci5iIC0gcGFyYS5taW5Db2xvci5iO1xuXG4gICAgY29uc3QgciA9IChkaWZmUmVkICogZmFjdG9yKSArIHBhcmEubWluQ29sb3IucjtcbiAgICBjb25zdCBnID0gKGRpZmZHcmVlbiAqIGZhY3RvcikgKyBwYXJhLm1pbkNvbG9yLmc7XG4gICAgY29uc3QgYiA9IChkaWZmQmx1ZSAqIGZhY3RvcikgKyBwYXJhLm1pbkNvbG9yLmI7XG5cbiAgICByZXR1cm4gYHJnYigke01hdGgucm91bmQocil9LCAke01hdGgucm91bmQoZyl9LCAke01hdGgucm91bmQoYil9KWA7XG4gIH1cblxuXG4gIHN0YXRpYyBnZXRUaHJlZUNvbG9yR3JhZGllbnRSR0IodmFsdWU6IG51bWJlciwgcGFyYTogVGhyZWVDb2xvckdyYWRpZW50QXJnSWYpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA8IHBhcmEubWlkZGxlVmFsdWUpIHtcbiAgICAgIHJldHVybiBHZUNzc0NvbG9yVXRpbC5nZXRUd29Db2xvckdyYWRpZW50UkdCKHZhbHVlLCBuZXcgVHdvQ29sb3JHcmFkaWVudEFyZyhwYXJhLm1pblZhbHVlLCBwYXJhLm1pbkNvbG9yLCBwYXJhLm1pZGRsZVZhbHVlLCBwYXJhLm1pZGRsZUNvbG9yKSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA+IHBhcmEubWlkZGxlVmFsdWUpIHtcbiAgICAgIHJldHVybiBHZUNzc0NvbG9yVXRpbC5nZXRUd29Db2xvckdyYWRpZW50UkdCKHZhbHVlLCBuZXcgVHdvQ29sb3JHcmFkaWVudEFyZyhwYXJhLm1pZGRsZVZhbHVlLCBwYXJhLm1pZGRsZUNvbG9yLCBwYXJhLm1heFZhbHVlLCBwYXJhLm1heENvbG9yKSk7XG4gICAgfVxuICAgIHJldHVybiBgcmdiKCR7cGFyYS5taWRkbGVDb2xvci5yfSwgJHtwYXJhLm1pZGRsZUNvbG9yLmd9LCAke3BhcmEubWlkZGxlQ29sb3IuYn0pYDtcbiAgfVxuXG59XG4iXX0=