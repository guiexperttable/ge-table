import { ValueLabel } from "../../data/common/value-label";
export class SelectCellRenderer {
    options;
    constructor(options) {
        this.options = options;
    }
    static create(values) {
        return new SelectCellRenderer(values.map(v => new ValueLabel(v, v)));
    }
    render(cellDiv, rowIndex, columnIndex, areaIdent, areaModel, _cellValue, domService) {
        if (areaModel.isEditable(rowIndex, columnIndex)) {
            domService.addClass(cellDiv, "ge-table-row-select-div");
            const val = areaModel.getValueAt(rowIndex, columnIndex);
            let opts = [];
            for (let option of this.options) {
                const selected = (option.value === val) ? " selected " : "";
                opts.push(`<option value="${option.value}" ${selected}>${option.label}</option>`);
            }
            const o = opts.join("");
            cellDiv.innerHTML = `
            <select
                type="text"
                value="${val}"
                autofocus
                data-listen="change"
                data-area="${areaIdent}"
                data-row-index="${rowIndex}"
                data-col-index="${columnIndex}"
                data-input-type="text"
                style="width:100%;height:100%;border:0;padding:0 0 0 8px;"
                class="ge-table-cell-editor-select">${o}</select>`;
        }
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWNlbGwtcmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RhYmxlL3NyYy9saWIvdGFibGUvcmVuZGVyZXIvZWRpdC9zZWxlY3QtY2VsbC1yZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFHM0QsTUFBTSxPQUFPLGtCQUFrQjtJQUdqQjtJQURaLFlBQ1ksT0FBdUI7UUFBdkIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7SUFFbkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBZ0I7UUFDNUIsT0FBTyxJQUFJLGtCQUFrQixDQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3RDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUNKLE9BQXVCLEVBQ3ZCLFFBQWdCLEVBQ2hCLFdBQW1CLEVBQ25CLFNBQW9CLEVBQ3BCLFNBQXNCLEVBQ3RCLFVBQWUsRUFDZixVQUF3QjtRQUV4QixJQUFJLFNBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxFQUFFO1lBQy9DLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLHlCQUF5QixDQUFDLENBQUM7WUFFeEQsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFeEQsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ2QsS0FBSyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUMvQixNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixNQUFNLENBQUMsS0FBSyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQzthQUNuRjtZQUNELE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFeEIsT0FBTyxDQUFDLFNBQVMsR0FBRzs7O3lCQUdELEdBQUc7Ozs2QkFHQyxTQUFTO2tDQUNKLFFBQVE7a0NBQ1IsV0FBVzs7O3NEQUdTLENBQUMsV0FBVyxDQUFDO1NBQzlEO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2VsbFJlbmRlcmVySWYgfSBmcm9tIFwiLi4vY2VsbC1yZW5kZXIuaWZcIjtcbmltcG9ydCB7IEFyZWFJZGVudCB9IGZyb20gXCIuLi8uLi9kYXRhL3RhYmxlbW9kZWwvYXJlYS1pZGVudC50eXBlXCI7XG5pbXBvcnQgeyBBcmVhTW9kZWxJZiB9IGZyb20gXCIuLi8uLi9kYXRhL3RhYmxlbW9kZWwvYXJlYW1vZGVsL2FyZWEtbW9kZWwuaWZcIjtcbmltcG9ydCB7IERvbVNlcnZpY2VJZiB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlL2RvbS1zZXJ2aWNlLmlmXCI7XG5pbXBvcnQgeyBSZW5kZXJlckNsZWFudXBGblR5cGUgfSBmcm9tIFwiLi4vcmVuZGVyZXItY2xlYW51cC1mbi50eXBlXCI7XG5pbXBvcnQgeyBWYWx1ZUxhYmVsSWYgfSBmcm9tIFwiLi4vLi4vZGF0YS9jb21tb24vdmFsdWUtbGFiZWwuaWZcIjtcbmltcG9ydCB7IFZhbHVlTGFiZWwgfSBmcm9tIFwiLi4vLi4vZGF0YS9jb21tb24vdmFsdWUtbGFiZWxcIjtcblxuXG5leHBvcnQgY2xhc3MgU2VsZWN0Q2VsbFJlbmRlcmVyIGltcGxlbWVudHMgQ2VsbFJlbmRlcmVySWYge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBvcHRpb25zOiBWYWx1ZUxhYmVsSWZbXVxuICApIHtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUodmFsdWVzOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiBuZXcgU2VsZWN0Q2VsbFJlbmRlcmVyKFxuICAgICAgdmFsdWVzLm1hcCh2ID0+IG5ldyBWYWx1ZUxhYmVsKHYsIHYpKVxuICAgICk7XG4gIH1cblxuICByZW5kZXIoXG4gICAgY2VsbERpdjogSFRNTERpdkVsZW1lbnQsXG4gICAgcm93SW5kZXg6IG51bWJlcixcbiAgICBjb2x1bW5JbmRleDogbnVtYmVyLFxuICAgIGFyZWFJZGVudDogQXJlYUlkZW50LFxuICAgIGFyZWFNb2RlbDogQXJlYU1vZGVsSWYsXG4gICAgX2NlbGxWYWx1ZTogYW55LFxuICAgIGRvbVNlcnZpY2U6IERvbVNlcnZpY2VJZik6IFJlbmRlcmVyQ2xlYW51cEZuVHlwZSB8IHVuZGVmaW5lZCB7XG5cbiAgICBpZiAoYXJlYU1vZGVsLmlzRWRpdGFibGUocm93SW5kZXgsIGNvbHVtbkluZGV4KSkge1xuICAgICAgZG9tU2VydmljZS5hZGRDbGFzcyhjZWxsRGl2LCBcImdlLXRhYmxlLXJvdy1zZWxlY3QtZGl2XCIpO1xuXG4gICAgICBjb25zdCB2YWwgPSBhcmVhTW9kZWwuZ2V0VmFsdWVBdChyb3dJbmRleCwgY29sdW1uSW5kZXgpO1xuXG4gICAgICBsZXQgb3B0cyA9IFtdO1xuICAgICAgZm9yIChsZXQgb3B0aW9uIG9mIHRoaXMub3B0aW9ucykge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IChvcHRpb24udmFsdWUgPT09IHZhbCkgPyBcIiBzZWxlY3RlZCBcIiA6IFwiXCI7XG4gICAgICAgIG9wdHMucHVzaChgPG9wdGlvbiB2YWx1ZT1cIiR7b3B0aW9uLnZhbHVlfVwiICR7c2VsZWN0ZWR9PiR7b3B0aW9uLmxhYmVsfTwvb3B0aW9uPmApO1xuICAgICAgfVxuICAgICAgY29uc3QgbyA9IG9wdHMuam9pbihcIlwiKTtcblxuICAgICAgY2VsbERpdi5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgIHZhbHVlPVwiJHt2YWx9XCJcbiAgICAgICAgICAgICAgICBhdXRvZm9jdXNcbiAgICAgICAgICAgICAgICBkYXRhLWxpc3Rlbj1cImNoYW5nZVwiXG4gICAgICAgICAgICAgICAgZGF0YS1hcmVhPVwiJHthcmVhSWRlbnR9XCJcbiAgICAgICAgICAgICAgICBkYXRhLXJvdy1pbmRleD1cIiR7cm93SW5kZXh9XCJcbiAgICAgICAgICAgICAgICBkYXRhLWNvbC1pbmRleD1cIiR7Y29sdW1uSW5kZXh9XCJcbiAgICAgICAgICAgICAgICBkYXRhLWlucHV0LXR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOjA7cGFkZGluZzowIDAgMCA4cHg7XCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImdlLXRhYmxlLWNlbGwtZWRpdG9yLXNlbGVjdFwiPiR7b308L3NlbGVjdD5gO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbn1cbiJdfQ==