import { AbstractStoreStateService } from "./abstract-store-state.service";
import { CollapsedExpandedData } from "./data/collapsed-expanded.data";
export class StoreStateCollapsedExpandService extends AbstractStoreStateService {
    COLLAPSED_EXPANDED_STATE = "collapsedExpandedState";
    collapsedExpandedState = new CollapsedExpandedData();
    constructor(fn) {
        super(fn);
        this.load();
    }
    collapsedExpandedStateGet() {
        return this.collapsedExpandedState;
    }
    collapsedExpandedStateIncludes(rowId) {
        return this.collapsedExpandedState.rowIds.includes(rowId);
    }
    collapsedStateIdsPush(id) {
        if (!this.collapsedExpandedState.rowIds.includes(id)) {
            this.collapsedExpandedState.rowIds.push(id);
            this.collapsedExpandedState.allCollapsed = false;
            this.collapsedExpandedState.allExpanded = false;
            this.persist();
        }
    }
    collapsedStateIdsRemove(id) {
        const idx = this.collapsedExpandedState.rowIds.indexOf(id);
        if (idx !== -1) {
            this.collapsedExpandedState.rowIds.splice(idx, 1);
            this.collapsedExpandedState.allCollapsed = false;
            this.collapsedExpandedState.allExpanded = false;
            this.persist();
        }
    }
    collapsedStateAll(expand) {
        this.collapsedExpandedState.rowIds = [];
        this.collapsedExpandedState.mode = expand ? "collapsed" : "expanded"; // if all expanded, rowids are the collapsed ones
        this.collapsedExpandedState.allCollapsed = !expand;
        this.collapsedExpandedState.allExpanded = expand;
        this.persist();
    }
    load() {
        const fn = this.getStorageKeyFn;
        if (fn) {
            const key = fn();
            if (key) {
                const subKey2 = key + this.COLLAPSED_EXPANDED_STATE;
                const data = this.loadFromLocalStorage(subKey2);
                if (data) {
                    this.collapsedExpandedState = data;
                }
            }
        }
    }
    persist() {
        this.checkAndPersistItem(this.COLLAPSED_EXPANDED_STATE, this.collapsedExpandedState);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtc3RhdGUtY29sbGFwc2VkLWV4cGFuZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy90YWJsZS9zcmMvbGliL3RhYmxlL3NlcnZpY2Uvc3RvcmUtc3RhdGUtY29sbGFwc2VkLWV4cGFuZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSXZFLE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSx5QkFBeUI7SUFFNUQsd0JBQXdCLEdBQUcsd0JBQXdCLENBQUM7SUFDN0Qsc0JBQXNCLEdBQTBCLElBQUkscUJBQXFCLEVBQUUsQ0FBQztJQUdwRixZQUNFLEVBQStCO1FBQy9CLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFHRCx5QkFBeUI7UUFDdkIsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUM7SUFDckMsQ0FBQztJQUVELDhCQUE4QixDQUFDLEtBQXdCO1FBQ3JELE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUdELHFCQUFxQixDQUFDLEVBQXFCO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNwRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUNqRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUNoRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEI7SUFDSCxDQUFDO0lBRUQsdUJBQXVCLENBQUMsRUFBcUI7UUFDM0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0QsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDakQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDaEQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQUdELGlCQUFpQixDQUFDLE1BQWU7UUFDL0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsaURBQWlEO1FBQ3ZILElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDbkQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFHa0IsSUFBSTtRQUNyQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ2hDLElBQUksRUFBRSxFQUFFO1lBQ04sTUFBTSxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDakIsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsTUFBTSxPQUFPLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztnQkFDcEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUF3QixPQUFPLENBQUMsQ0FBQztnQkFDdkUsSUFBSSxJQUFJLEVBQUU7b0JBQ1IsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQztpQkFDcEM7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVPLE9BQU87UUFDYixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7Q0FHRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0U3RvcmVTdGF0ZVNlcnZpY2UgfSBmcm9tIFwiLi9hYnN0cmFjdC1zdG9yZS1zdGF0ZS5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBDb2xsYXBzZWRFeHBhbmRlZERhdGEgfSBmcm9tIFwiLi9kYXRhL2NvbGxhcHNlZC1leHBhbmRlZC5kYXRhXCI7XG5pbXBvcnQgeyBHZXRTdG9yYWdlS2V5Rm4gfSBmcm9tIFwiLi4vZGF0YS9vcHRpb25zL2F1dG8tcmVzdG9yZS1vcHRpb25zLmlmXCI7XG5cblxuZXhwb3J0IGNsYXNzIFN0b3JlU3RhdGVDb2xsYXBzZWRFeHBhbmRTZXJ2aWNlIGV4dGVuZHMgQWJzdHJhY3RTdG9yZVN0YXRlU2VydmljZSB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBDT0xMQVBTRURfRVhQQU5ERURfU1RBVEUgPSBcImNvbGxhcHNlZEV4cGFuZGVkU3RhdGVcIjtcbiAgcHJpdmF0ZSBjb2xsYXBzZWRFeHBhbmRlZFN0YXRlOiBDb2xsYXBzZWRFeHBhbmRlZERhdGEgPSBuZXcgQ29sbGFwc2VkRXhwYW5kZWREYXRhKCk7XG5cblxuICBjb25zdHJ1Y3RvcihcbiAgICBmbjogR2V0U3RvcmFnZUtleUZuIHwgdW5kZWZpbmVkKSB7XG4gICAgc3VwZXIoZm4pO1xuICAgIHRoaXMubG9hZCgpO1xuICB9XG5cblxuICBjb2xsYXBzZWRFeHBhbmRlZFN0YXRlR2V0KCk6IENvbGxhcHNlZEV4cGFuZGVkRGF0YSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGFwc2VkRXhwYW5kZWRTdGF0ZTtcbiAgfVxuXG4gIGNvbGxhcHNlZEV4cGFuZGVkU3RhdGVJbmNsdWRlcyhyb3dJZDogKHN0cmluZyB8IG51bWJlcikpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb2xsYXBzZWRFeHBhbmRlZFN0YXRlLnJvd0lkcy5pbmNsdWRlcyhyb3dJZCk7XG4gIH1cblxuXG4gIGNvbGxhcHNlZFN0YXRlSWRzUHVzaChpZDogKHN0cmluZyB8IG51bWJlcikpIHtcbiAgICBpZiAoIXRoaXMuY29sbGFwc2VkRXhwYW5kZWRTdGF0ZS5yb3dJZHMuaW5jbHVkZXMoaWQpKSB7XG4gICAgICB0aGlzLmNvbGxhcHNlZEV4cGFuZGVkU3RhdGUucm93SWRzLnB1c2goaWQpO1xuICAgICAgdGhpcy5jb2xsYXBzZWRFeHBhbmRlZFN0YXRlLmFsbENvbGxhcHNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jb2xsYXBzZWRFeHBhbmRlZFN0YXRlLmFsbEV4cGFuZGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnBlcnNpc3QoKTtcbiAgICB9XG4gIH1cblxuICBjb2xsYXBzZWRTdGF0ZUlkc1JlbW92ZShpZDogKHN0cmluZyB8IG51bWJlcikpIHtcbiAgICBjb25zdCBpZHggPSB0aGlzLmNvbGxhcHNlZEV4cGFuZGVkU3RhdGUucm93SWRzLmluZGV4T2YoaWQpO1xuICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICB0aGlzLmNvbGxhcHNlZEV4cGFuZGVkU3RhdGUucm93SWRzLnNwbGljZShpZHgsIDEpO1xuICAgICAgdGhpcy5jb2xsYXBzZWRFeHBhbmRlZFN0YXRlLmFsbENvbGxhcHNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jb2xsYXBzZWRFeHBhbmRlZFN0YXRlLmFsbEV4cGFuZGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnBlcnNpc3QoKTtcbiAgICB9XG4gIH1cblxuXG4gIGNvbGxhcHNlZFN0YXRlQWxsKGV4cGFuZDogYm9vbGVhbikge1xuICAgIHRoaXMuY29sbGFwc2VkRXhwYW5kZWRTdGF0ZS5yb3dJZHMgPSBbXTtcbiAgICB0aGlzLmNvbGxhcHNlZEV4cGFuZGVkU3RhdGUubW9kZSA9IGV4cGFuZCA/IFwiY29sbGFwc2VkXCIgOiBcImV4cGFuZGVkXCI7IC8vIGlmIGFsbCBleHBhbmRlZCwgcm93aWRzIGFyZSB0aGUgY29sbGFwc2VkIG9uZXNcbiAgICB0aGlzLmNvbGxhcHNlZEV4cGFuZGVkU3RhdGUuYWxsQ29sbGFwc2VkID0gIWV4cGFuZDtcbiAgICB0aGlzLmNvbGxhcHNlZEV4cGFuZGVkU3RhdGUuYWxsRXhwYW5kZWQgPSBleHBhbmQ7XG4gICAgdGhpcy5wZXJzaXN0KCk7XG4gIH1cblxuXG4gIHByb3RlY3RlZCBvdmVycmlkZSBsb2FkKCkge1xuICAgIGNvbnN0IGZuID0gdGhpcy5nZXRTdG9yYWdlS2V5Rm47XG4gICAgaWYgKGZuKSB7XG4gICAgICBjb25zdCBrZXkgPSBmbigpO1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCBzdWJLZXkyID0ga2V5ICsgdGhpcy5DT0xMQVBTRURfRVhQQU5ERURfU1RBVEU7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmxvYWRGcm9tTG9jYWxTdG9yYWdlPENvbGxhcHNlZEV4cGFuZGVkRGF0YT4oc3ViS2V5Mik7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgdGhpcy5jb2xsYXBzZWRFeHBhbmRlZFN0YXRlID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcGVyc2lzdCgpIHtcbiAgICB0aGlzLmNoZWNrQW5kUGVyc2lzdEl0ZW0odGhpcy5DT0xMQVBTRURfRVhQQU5ERURfU1RBVEUsIHRoaXMuY29sbGFwc2VkRXhwYW5kZWRTdGF0ZSk7XG4gIH1cblxuXG59XG4iXX0=