export class AbstractStoreStateService {
    getStorageKeyFn;
    constructor(fn) {
        this.getStorageKeyFn = fn;
    }
    autoConvertMapToObject(item) {
        const obj = {};
        if (item instanceof Map) {
            const map = item;
            for (const item of [...map]) {
                const [key, value] = item;
                // @ts-ignore
                obj[key] = value;
            }
        }
        return obj;
    }
    checkAndPersistItem(keySuffix, item) {
        const fn = this.getStorageKeyFn;
        if (fn) {
            const key = fn();
            if (key) {
                const subKey = key + keySuffix;
                if ((item + "").includes("Map")) {
                    const obj = this.autoConvertMapToObject(item);
                    this.persistItem(subKey, obj);
                }
                else {
                    this.persistItem(subKey, item);
                }
            }
        }
    }
    persistItem(subKey, item) {
        if (item) {
            localStorage.setItem(subKey, JSON.stringify(item));
        }
        else {
            localStorage.removeItem(subKey);
        }
    }
    loadFromLocalStorage(subKey) {
        const item = localStorage.getItem(subKey);
        if (item) {
            return JSON.parse(item);
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3Qtc3RvcmUtc3RhdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdGFibGUvc3JjL2xpYi90YWJsZS9zZXJ2aWNlL2Fic3RyYWN0LXN0b3JlLXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxPQUFnQix5QkFBeUI7SUFHbkMsZUFBZSxDQUErQjtJQUd4RCxZQUFZLEVBQStCO1FBQ3pDLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxJQUFTO1FBQzlCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksSUFBSSxZQUFZLEdBQUcsRUFBRTtZQUN2QixNQUFNLEdBQUcsR0FBRyxJQUF3QixDQUFDO1lBRXJDLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQixNQUFNLENBQ0osR0FBRyxFQUNILEtBQUssQ0FDTixHQUFHLElBQUksQ0FBQztnQkFDVCxhQUFhO2dCQUNiLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDbEI7U0FDRjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQU1TLG1CQUFtQixDQUFDLFNBQWlCLEVBQUUsSUFBUztRQUN4RCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ2hDLElBQUksRUFBRSxFQUFFO1lBQ04sTUFBTSxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDakIsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsTUFBTSxNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQy9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQy9CO3FCQUFNO29CQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2lCQUNoQzthQUVGO1NBQ0Y7SUFDSCxDQUFDO0lBRVMsV0FBVyxDQUFDLE1BQWMsRUFBRSxJQUFxQjtRQUN6RCxJQUFJLElBQUksRUFBRTtZQUNSLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0wsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFUyxvQkFBb0IsQ0FBSSxNQUFjO1FBQzlDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFNLENBQUM7U0FDOUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0F1Q0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRTdG9yYWdlS2V5Rm4gfSBmcm9tIFwiLi4vZGF0YS9vcHRpb25zL2F1dG8tcmVzdG9yZS1vcHRpb25zLmlmXCI7XG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0U3RvcmVTdGF0ZVNlcnZpY2Uge1xuXG5cbiAgcHJvdGVjdGVkIGdldFN0b3JhZ2VLZXlGbj86IHVuZGVmaW5lZCB8IEdldFN0b3JhZ2VLZXlGbjtcblxuXG4gIGNvbnN0cnVjdG9yKGZuOiBHZXRTdG9yYWdlS2V5Rm4gfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLmdldFN0b3JhZ2VLZXlGbiA9IGZuO1xuICB9XG5cbiAgYXV0b0NvbnZlcnRNYXBUb09iamVjdChpdGVtOiBhbnkpIHtcbiAgICBjb25zdCBvYmogPSB7fTtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgY29uc3QgbWFwID0gaXRlbSBhcyBNYXA8c3RyaW5nLCBhbnk+O1xuXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgWy4uLm1hcF0pIHtcbiAgICAgICAgY29uc3QgW1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICBdID0gaXRlbTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgLy8gYWJzdHJhY3QgZ2V0U3ViS2V5KCk6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgbG9hZCgpOiB2b2lkO1xuXG4gIHByb3RlY3RlZCBjaGVja0FuZFBlcnNpc3RJdGVtKGtleVN1ZmZpeDogc3RyaW5nLCBpdGVtOiBhbnkpIHtcbiAgICBjb25zdCBmbiA9IHRoaXMuZ2V0U3RvcmFnZUtleUZuO1xuICAgIGlmIChmbikge1xuICAgICAgY29uc3Qga2V5ID0gZm4oKTtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3Qgc3ViS2V5ID0ga2V5ICsga2V5U3VmZml4O1xuICAgICAgICBpZiAoKGl0ZW0gKyBcIlwiKS5pbmNsdWRlcyhcIk1hcFwiKSkge1xuICAgICAgICAgIGNvbnN0IG9iaiA9IHRoaXMuYXV0b0NvbnZlcnRNYXBUb09iamVjdChpdGVtKTtcbiAgICAgICAgICB0aGlzLnBlcnNpc3RJdGVtKHN1YktleSwgb2JqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBlcnNpc3RJdGVtKHN1YktleSwgaXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBwZXJzaXN0SXRlbShzdWJLZXk6IHN0cmluZywgaXRlbTogc3RyaW5nIHwgb2JqZWN0KSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN1YktleSwgSlNPTi5zdHJpbmdpZnkoaXRlbSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzdWJLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkRnJvbUxvY2FsU3RvcmFnZTxVPihzdWJLZXk6IHN0cmluZyk6IFUgfCBudWxsIHtcbiAgICBjb25zdCBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oc3ViS2V5KTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoaXRlbSkgYXMgVTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBwcml2YXRlIGxvYWRJdGVtcygpIHtcbiAgLy8gICBjb25zdCBmbiA9IHRoaXMuZ2V0U3RvcmFnZUtleUZuO1xuICAvLyAgIGlmIChmbikge1xuICAvLyAgICAgY29uc3Qga2V5ID0gZm4oKTtcbiAgLy8gICAgIGlmIChrZXkpIHtcbiAgLy8gICAgICAgLy8gQSBtYWluIGtleSBpcyBnaXZlbiBieSBmdW5jdGlvbiBmcm9tIG9wdGlvbnNcbiAgLy8gICAgICAgY29uc3Qgc3ViS2V5ID0ga2V5ICsgdGhpcy5DSEVDS0VEX1NUQVRFO1xuICAvLyAgICAgICBjb25zdCBhcnIgPSB0aGlzLmxvYWRGcm9tTG9jYWxTdG9yYWdlPEFycmF5PHN0cmluZyB8IG51bWJlcj4+KHN1YktleSk7XG4gIC8vICAgICAgIGlmIChhcnIpIHtcbiAgLy8gICAgICAgICB0aGlzLmNoZWNrZWRTdGF0ZUlkcy5sZW5ndGggPSAwO1xuICAvLyAgICAgICAgIGFyci5mb3JFYWNoKGEgPT4gdGhpcy5jaGVja2VkU3RhdGVJZHMucHVzaChhKSk7XG4gIC8vICAgICAgIH1cbiAgLy9cbiAgLy8gICAgICAgY29uc3Qgc3ViS2V5MiA9IGtleSArIHRoaXMuQ09MTEFQU0VEX0VYUEFOREVEX1NUQVRFO1xuICAvLyAgICAgICBjb25zdCBkYXRhID0gdGhpcy5sb2FkRnJvbUxvY2FsU3RvcmFnZTxDb2xsYXBzZWRFeHBhbmRlZERhdGE+KHN1YktleTIpO1xuICAvLyAgICAgICBpZiAoZGF0YSkge1xuICAvLyAgICAgICAgIHRoaXMuY29sbGFwc2VkRXhwYW5kZWRTdGF0ZSA9IGRhdGE7XG4gIC8vICAgICAgIH1cbiAgLy9cbiAgLy8gICAgICAgY29uc3Qgc3ViS2V5MyA9IGtleSArIHRoaXMuU0VMRUNURURfU1RBVEU7XG4gIC8vICAgICAgIGNvbnN0IGFycjMgPSB0aGlzLmxvYWRGcm9tTG9jYWxTdG9yYWdlPG9iamVjdD4oc3ViS2V5Myk7XG4gIC8vICAgICAgIGlmIChhcnIzKSB7XG4gIC8vICAgICAgICAgY29uc3QgbWFwOiBNYXA8c3RyaW5nIHwgbnVtYmVyLCBzdHJpbmdbXT4gPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKGFycjMpKTtcbiAgLy8gICAgICAgICBpZiAobWFwKSB7XG4gIC8vICAgICAgICAgICB0aGlzLnNlbGVjdGVkU3RhdGVJZHMuY2xlYXIoKTtcbiAgLy8gICAgICAgICAgIG1hcC5mb3JFYWNoKChjb2wsIGspID0+IHRoaXMuc2VsZWN0ZWRTdGF0ZUlkcy5zZXQoaywgY29sKSk7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICB9XG4gIC8vXG4gIC8vICAgICAgIGNvbnN0IHN1YktleTQgPSBrZXkgKyB0aGlzLlNDUk9MTF9TVEFURTtcbiAgLy8gICAgICAgbGV0IHNjcm9sbE9mZnNldCA9IHRoaXMubG9hZEZyb21Mb2NhbFN0b3JhZ2U8W251bWJlciwgbnVtYmVyXT4oc3ViS2V5NCk7XG4gIC8vICAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gc2Nyb2xsT2Zmc2V0ID8gc2Nyb2xsT2Zmc2V0IDogWzAsIDBdO1xuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gfVxuXG5cbn1cbiJdfQ==