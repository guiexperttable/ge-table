import { CellRange } from "../data/common/cell-range";
export class SelectionModel {
    selectionType;
    selectionMode;
    ranges = [];
    negativeRanges = [];
    allSelected = false;
    constructor(selectionType = "none", selectionMode = "single") {
        this.selectionType = selectionType;
        this.selectionMode = selectionMode;
    }
    getSelectionCount(rowIndex, columnIndex) {
        let count = 0;
        for (const range of this.ranges) {
            if (range.isInRange(rowIndex, columnIndex)) {
                count++;
            }
        }
        if (this.allSelected) {
            count++;
        }
        if (this.isInNegativeRange(rowIndex, columnIndex)) {
            count = 0;
        }
        return count;
    }
    isInNegativeRange(rowIndex, columnIndex) {
        for (const range of this.negativeRanges) {
            if (range.isInRange(rowIndex, columnIndex)) {
                return true;
            }
        }
        return false;
    }
    getRanges() {
        return this.ranges;
    }
    clear() {
        this.ranges = [];
        this.negativeRanges = [];
        this.allSelected = false;
    }
    hasSelection() {
        return !!this.ranges.length;
    }
    selectAll() {
        this.allSelected = true;
    }
    addSelection(range) {
        this.addRange(range);
    }
    removeSelection(range) {
        if (this.selectionType === "none") {
            return; // skip!
        }
        let r = range;
        if (this.selectionType === "row") {
            r = CellRange.singleRow(range.r1);
        }
        else if (this.selectionType === "column") {
            r = CellRange.singleColumn(range.c1);
        }
        this.negativeRanges.push(r);
    }
    togglePoint(row, col) {
        if (this.getSelectionCount(row, col) > 0) {
            this.removeSelection(CellRange.singleCell(row, col));
        }
        else {
            this.addSelection(CellRange.singleCell(row, col));
        }
    }
    addRange(range) {
        if (this.selectionType === "none") {
            return; // skip!
        }
        this.allSelected = false;
        if (this.selectionMode === "single") {
            this.ranges = [];
        }
        if (this.selectionType === "row") {
            range.c1 = 0;
            range.c2 = Number.MAX_SAFE_INTEGER;
        }
        else if (this.selectionType === "column") {
            range.r1 = 0;
            range.r2 = Number.MAX_SAFE_INTEGER;
        }
        else if (this.selectionType === "cell") {
            range.r2 = range.r1;
            range.c2 = range.c1;
        }
        else if (this.selectionType === "range") {
            //
        }
        this.ranges.push(range);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy90YWJsZS9zcmMvbGliL3RhYmxlL3NlbGVjdGlvbi9zZWxlY3Rpb24tbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBSXRELE1BQU0sT0FBTyxjQUFjO0lBT2hCO0lBQ0E7SUFOQyxNQUFNLEdBQWdCLEVBQUUsQ0FBQztJQUN6QixjQUFjLEdBQWdCLEVBQUUsQ0FBQztJQUNqQyxXQUFXLEdBQVksS0FBSyxDQUFDO0lBRXZDLFlBQ1MsZ0JBQStCLE1BQU0sRUFDckMsZ0JBQStCLFFBQVE7UUFEdkMsa0JBQWEsR0FBYixhQUFhLENBQXdCO1FBQ3JDLGtCQUFhLEdBQWIsYUFBYSxDQUEwQjtJQUVoRCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsUUFBZ0IsRUFBRSxXQUFtQjtRQUNyRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFBRTtnQkFDMUMsS0FBSyxFQUFFLENBQUM7YUFDVDtTQUNGO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLEtBQUssRUFBRSxDQUFDO1NBQ1Q7UUFDRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEVBQUU7WUFDakQsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUNYO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsaUJBQWlCLENBQUMsUUFBZ0IsRUFBRSxXQUFtQjtRQUNyRCxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdkMsSUFBSSxLQUFLLENB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QUU7U0FDSDtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENlbGxSYW5nZSB9IGZyb20gXCIuLi9kYXRhL2NvbW1vbi9jZWxsLXJhbmdlXCI7XG5pbXBvcnQgeyBTZWxlY3Rpb25Nb2RlLCBTZWxlY3Rpb25UeXBlIH0gZnJvbSBcIi4vc2VsZWN0aW9uLnR5cGVcIjtcbmltcG9ydCB7IFNlbGVjdGlvbk1vZGVsSWYgfSBmcm9tIFwiLi9zZWxlY3Rpb24tbW9kZWwuaWZcIjtcblxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvbk1vZGVsIGltcGxlbWVudHMgU2VsZWN0aW9uTW9kZWxJZiB7XG5cbiAgcHJvdGVjdGVkIHJhbmdlczogQ2VsbFJhbmdlW10gPSBbXTtcbiAgcHJvdGVjdGVkIG5lZ2F0aXZlUmFuZ2VzOiBDZWxsUmFuZ2VbXSA9IFtdO1xuICBwcm90ZWN0ZWQgYWxsU2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc2VsZWN0aW9uVHlwZTogU2VsZWN0aW9uVHlwZSA9IFwibm9uZVwiLFxuICAgIHB1YmxpYyBzZWxlY3Rpb25Nb2RlOiBTZWxlY3Rpb25Nb2RlID0gXCJzaW5nbGVcIlxuICApIHtcbiAgfVxuXG4gIGdldFNlbGVjdGlvbkNvdW50KHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbkluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCByYW5nZSBvZiB0aGlzLnJhbmdlcykge1xuICAgICAgaWYgKHJhbmdlLmlzSW5SYW5nZShyb3dJbmRleCwgY29sdW1uSW5kZXgpKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLmFsbFNlbGVjdGVkKSB7XG4gICAgICBjb3VudCsrO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0luTmVnYXRpdmVSYW5nZShyb3dJbmRleCwgY29sdW1uSW5kZXgpKSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbiAgfVxuXG4gIGlzSW5OZWdhdGl2ZVJhbmdlKHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbkluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBmb3IgKGNvbnN0IHJhbmdlIG9mIHRoaXMubmVnYXRpdmVSYW5nZXMpIHtcbiAgICAgIGlmIChyYW5nZS5pc0luUmFuZ2Uocm93SW5kZXgsIGNvbHVtbkluZGV4KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0UmFuZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLnJhbmdlcztcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMucmFuZ2VzID0gW107XG4gICAgdGhpcy5uZWdhdGl2ZVJhbmdlcyA9IFtdO1xuICAgIHRoaXMuYWxsU2VsZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGhhc1NlbGVjdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnJhbmdlcy5sZW5ndGg7XG4gIH1cblxuICBzZWxlY3RBbGwoKSB7XG4gICAgdGhpcy5hbGxTZWxlY3RlZCA9IHRydWU7XG4gIH1cblxuICBhZGRTZWxlY3Rpb24ocmFuZ2U6IENlbGxSYW5nZSk6IHZvaWQge1xuICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2UpO1xuICB9XG5cbiAgcmVtb3ZlU2VsZWN0aW9uKHJhbmdlOiBDZWxsUmFuZ2UpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25UeXBlID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuOyAvLyBza2lwIVxuICAgIH1cbiAgICBsZXQgciA9IHJhbmdlO1xuICAgIGlmICh0aGlzLnNlbGVjdGlvblR5cGUgPT09IFwicm93XCIpIHtcbiAgICAgIHIgPSBDZWxsUmFuZ2Uuc2luZ2xlUm93KHJhbmdlLnIxKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0aW9uVHlwZSA9PT0gXCJjb2x1bW5cIikge1xuICAgICAgciA9IENlbGxSYW5nZS5zaW5nbGVDb2x1bW4ocmFuZ2UuYzEpO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlUmFuZ2VzLnB1c2gocik7XG4gIH1cblxuICB0b2dnbGVQb2ludChyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5nZXRTZWxlY3Rpb25Db3VudChyb3csIGNvbCkgPiAwKSB7XG4gICAgICB0aGlzLnJlbW92ZVNlbGVjdGlvbihDZWxsUmFuZ2Uuc2luZ2xlQ2VsbChyb3csIGNvbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZFNlbGVjdGlvbihDZWxsUmFuZ2Uuc2luZ2xlQ2VsbChyb3csIGNvbCkpO1xuICAgIH1cbiAgfVxuXG5cbiAgcHJpdmF0ZSBhZGRSYW5nZShyYW5nZTogQ2VsbFJhbmdlKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uVHlwZSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHJldHVybjsgLy8gc2tpcCFcbiAgICB9XG4gICAgdGhpcy5hbGxTZWxlY3RlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUgPT09IFwic2luZ2xlXCIpIHtcbiAgICAgIHRoaXMucmFuZ2VzID0gW107XG4gICAgfVxuICAgIGlmICh0aGlzLnNlbGVjdGlvblR5cGUgPT09IFwicm93XCIpIHtcbiAgICAgIHJhbmdlLmMxID0gMDtcbiAgICAgIHJhbmdlLmMyID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGlvblR5cGUgPT09IFwiY29sdW1uXCIpIHtcbiAgICAgIHJhbmdlLnIxID0gMDtcbiAgICAgIHJhbmdlLnIyID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGlvblR5cGUgPT09IFwiY2VsbFwiKSB7XG4gICAgICByYW5nZS5yMiA9IHJhbmdlLnIxO1xuICAgICAgcmFuZ2UuYzIgPSByYW5nZS5jMTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0aW9uVHlwZSA9PT0gXCJyYW5nZVwiKSB7XG4gICAgICAvL1xuICAgIH1cbiAgICB0aGlzLnJhbmdlcy5wdXNoKHJhbmdlKTtcbiAgfVxuXG59XG4iXX0=