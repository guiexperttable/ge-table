import { DefaultRowHeights } from "../data/options/default-row-heights";
import { ColumnDef } from "../data/tablemodel/column/column-def";
import { px200 } from "../data/common/sizes";
import { AreaModelArrayOfArrays } from "../data/tablemodel/areamodel/area-model-array-of-arrays";
import { AreaModelHidden } from "../data/tablemodel/areamodel/area-model-hidden";
import { TreeRow } from "../data/common/tree-row";
import { AreaModelTree } from "../data/tablemodel/areamodel/area-model-tree";
import { TreeCheckboxModel } from "../checkbox/tree-checkbox-model";
import { TableModel } from "../data/tablemodel/table-model";
import { AreaModelObjectArrayWithColumndefs } from "../data/tablemodel/areamodel/area-model-object-array-with-columndefs";
import { TableOptions } from "../data/options/table-options";
export class TableFactory {
    static createTableModel(p) {
        if (p.defaultRowHeights === undefined) {
            if (p.tableOptions?.defaultRowHeights) {
                p.defaultRowHeights = p.tableOptions.defaultRowHeights;
            }
            else {
                p.defaultRowHeights = new DefaultRowHeights();
                if (p.headerAreaModel && "defaultRowHeight" in p.headerAreaModel) {
                    const dh = p.headerAreaModel.defaultRowHeight;
                    if (dh > -1) {
                        p.defaultRowHeights.header = dh;
                    }
                }
                if (p.bodyAreaModel && "defaultRowHeight" in p.bodyAreaModel) {
                    const dh = p.bodyAreaModel.defaultRowHeight;
                    if (dh > -1) {
                        p.defaultRowHeights.body = dh;
                    }
                }
                if (p.footerAreaModel && "defaultRowHeight" in p.footerAreaModel) {
                    const dh = p.footerAreaModel.defaultRowHeight;
                    if (dh > -1) {
                        p.defaultRowHeights.footer = dh;
                    }
                }
            }
        }
        if (p.columnDefs === undefined) {
            if (p.properties?.length) {
                p.columnDefs = p.properties.map(p => new ColumnDef(p, p.toUpperCase(), px200));
            }
            else if (p.rows?.length) {
                p.columnDefs = Object.keys(p.rows[0]).map(p => new ColumnDef(p, p.toUpperCase(), px200));
            }
            else {
                p.columnDefs = [];
            }
        }
        if (p.columnCount === undefined) {
            if (p.columnDefs?.length) {
                p.columnCount = p.columnDefs.length;
            }
            else if (p.headerData?.length) {
                p.columnCount = p.headerData[0].length;
            }
            else if (p.columnSizes?.length) {
                p.columnCount = p.columnSizes?.length;
            }
            else {
                console.warn("Property \"columnCount\" is missing and cannot be derived from other properties.");
            }
        }
        if (!p.headerAreaModel) {
            if (p.headerData?.length) {
                p.headerAreaModel = new AreaModelArrayOfArrays("header", p.headerData, p.defaultRowHeights.header, p.columnDefs);
            }
            else if (p.columnDefs?.length) {
                p.headerAreaModel = new AreaModelArrayOfArrays("header", [p.columnDefs.map(def => def.headerLabel)], p.defaultRowHeights.header, p.columnDefs);
            }
            else {
                p.headerAreaModel = new AreaModelHidden("header");
            }
        }
        if (!p.footerAreaModel) {
            if (p.footerData?.length) {
                p.footerAreaModel = new AreaModelArrayOfArrays("footer", p.footerData, p.defaultRowHeights.footer, p.columnDefs);
            }
            else {
                p.footerAreaModel = new AreaModelHidden("footer");
            }
        }
        if (!p.bodyAreaModel) {
            if (p.rows) {
                if (p.rows?.length && p.rows[0] instanceof TreeRow) {
                    // Tree:
                    const treeRows = p.rows;
                    p.bodyAreaModel = new AreaModelTree("body", treeRows, p.defaultRowHeights.body, p.columnDefs);
                    const checkboxExtraColumnVisible = p.columnDefs[0].property === "CheckboxColumn";
                    if (checkboxExtraColumnVisible || p.tableOptions?.showCheckboxWihoutExtraColumn) {
                        p.bodyAreaModel.rowSelectionModel = new TreeCheckboxModel(treeRows);
                    }
                }
                else {
                    p.bodyAreaModel = new AreaModelObjectArrayWithColumndefs("body", p.rows, p.columnDefs, p.defaultRowHeights.body);
                }
            }
            else if (p.bodyData) {
                p.bodyAreaModel = new AreaModelArrayOfArrays("body", p.bodyData, p.defaultRowHeights.body);
            }
            else {
                p.bodyAreaModel = new AreaModelHidden("body");
            }
        }
        if (p.fixedLeftColumnCount === undefined) {
            p.fixedLeftColumnCount = 0;
        }
        if (p.fixedRightColumnCount === undefined) {
            p.fixedRightColumnCount = 0;
        }
        if (p.rowCheckboxVisible === undefined) {
            p.rowCheckboxVisible = false;
        }
        if (p.overridingColumnWidth === undefined) {
            p.overridingColumnWidth = -1;
        }
        if (!p.getSelectionModel && p.tableOptions?.getSelectionModel) {
            p.getSelectionModel = p.tableOptions?.getSelectionModel;
        }
        // Flat table:
        return new TableModel(p.headerAreaModel, p.bodyAreaModel, p.footerAreaModel, p.fixedLeftColumnCount, p.fixedRightColumnCount, p.rowCheckboxVisible, p.defaultRowHeights, p.columnDefs, p.columnSizes, p.overridingColumnWidth, p.columnCount, p.parentSize, p.getSelectionModel);
    }
    static buildByTypedRowsParam(param) {
        return TableFactory.buildByTypedRows(param.rows ?? [], param.columnDefs, param.tableOptions ?? new TableOptions(), param.fixedLeftColumnCount ?? 0, param.fixedRightColumnCount ?? 0);
    }
    static buildByTypedRows(rows, columnDefs, tableOptions = new TableOptions(), fixedLeftColumnCount = 0, fixedRightColumnCount = 0) {
        const defaultRowHeights = tableOptions.defaultRowHeights;
        const checkboxExtraColumnVisible = columnDefs[0].property === "CheckboxColumn";
        if (rows?.length && rows[0] instanceof TreeRow) {
            // Tree:
            const treeRows = rows;
            const bodyareaModel = new AreaModelTree("body", treeRows, defaultRowHeights.body, columnDefs);
            if (checkboxExtraColumnVisible || tableOptions.showCheckboxWihoutExtraColumn) {
                bodyareaModel.rowSelectionModel = new TreeCheckboxModel(treeRows);
            }
            return TableFactory.createByAreaModelsParam({
                headerAreaModel: new AreaModelArrayOfArrays("header", [columnDefs.map(def => def.headerLabel)], defaultRowHeights.header),
                bodyAreaModel: bodyareaModel,
                footerAreaModel: new AreaModelArrayOfArrays("footer", [], defaultRowHeights.footer),
                columnDefs,
                fixedLeftColumnCount,
                fixedRightColumnCount,
                defaultRowHeights: tableOptions.defaultRowHeights,
                rowCheckboxVisible: false,
                columnSizes: [],
                columnCount: columnDefs.length,
                overridingColumnWidth: -1
            });
        }
        // Flat table:
        return TableFactory.createByObjectArrayParam({
            rows,
            columnDefs,
            fixedLeftColumnCount,
            fixedRightColumnCount,
            defaultRowHeights: tableOptions.defaultRowHeights
        });
    }
    static createByObjectArrayParam(param) {
        const rowCheckboxVisible = param.rowCheckboxVisible !== undefined ? param.rowCheckboxVisible : false;
        return TableFactory.createByObjectArray(param.rows, param.header ?? [], param.footer ?? [], param.fixedLeftColumnCount ?? 0, param.fixedRightColumnCount ?? 0, rowCheckboxVisible, param.defaultRowHeights ?? new DefaultRowHeights(), param.columnDefs ?? [], param.columnSizes ?? []);
    }
    static createByAreaModels(headerAreaModel = new AreaModelHidden(), bodyAreaModel, footerAreaModel = new AreaModelHidden(), fixedLeftColumnCount = 0, fixedRightColumnCount = 0, rowCheckboxVisible = false, defaultRowHeights = new DefaultRowHeights(), columnDefs, columnSizes = [], overridingColumnWidth = -1, columnCount) {
        return new TableModel(headerAreaModel, bodyAreaModel, footerAreaModel, fixedLeftColumnCount, fixedRightColumnCount, rowCheckboxVisible, defaultRowHeights, columnDefs, columnSizes, overridingColumnWidth, columnCount);
    }
    static createByAreaModelsParam(param) {
        return TableFactory.createByAreaModels(param.headerAreaModel ?? new AreaModelHidden(), param.bodyAreaModel, param.footerAreaModel ?? new AreaModelHidden(), param.fixedLeftColumnCount ?? 0, param.fixedRightColumnCount ?? 0, param.rowCheckboxVisible === undefined ? false : param.rowCheckboxVisible, param.defaultRowHeights, param.columnDefs ?? [], param.columnSizes ?? [], param.overridingColumnWidth ?? -1, param.columnCount ?? 0);
    }
    static createByObjectArray(rows, header = [], footer = [], fixedLeftColumnCount = 0, fixedRightColumnCount = 0, rowCheckboxVisible = false, defaultRowHeights = new DefaultRowHeights(), columnDefs, columnSizes = []) {
        let headerAreaModel;
        if (header?.length) {
            headerAreaModel = new AreaModelArrayOfArrays("header", header, defaultRowHeights.header, columnDefs);
        }
        else if (columnDefs?.length) {
            headerAreaModel = new AreaModelArrayOfArrays("header", [columnDefs.map(def => def.headerLabel)], defaultRowHeights.header, columnDefs);
        }
        else {
            headerAreaModel = new AreaModelHidden();
        }
        const footerAreaModel = footer ? new AreaModelArrayOfArrays("footer", footer, defaultRowHeights.footer, columnDefs) : new AreaModelHidden();
        const bodyAreaModel = new AreaModelObjectArrayWithColumndefs("body", rows, columnDefs, defaultRowHeights.body);
        return new TableModel(headerAreaModel, bodyAreaModel, footerAreaModel, fixedLeftColumnCount, fixedRightColumnCount, rowCheckboxVisible, defaultRowHeights, columnDefs, columnSizes);
    }
}
//# sourceMappingURL=data:application/json;base64,