import { TreeRow } from "../data/common/tree-row";
export class TreeFactory {
    static buildTreeRows(data, childrenProperty = "children", deepMaxLimit = 12) {
        const ret = [];
        for (const r of data) {
            ret.push(TreeFactory.buildTreeRow(r, childrenProperty, undefined, 0, deepMaxLimit));
        }
        return ret;
    }
    static buildTreeRow(data, childrenProperty = "children", parent = new TreeRow(data, true, [], undefined, 0), //, false , '0', '0'),
    deep = 0, deepMaxLimit = 12) {
        if (deep > deepMaxLimit) {
            console.warn("Max deep limit reached: ", deep);
            return parent;
        }
        // @ts-ignore
        const children = data[childrenProperty];
        if (children) {
            for (const r of children) {
                const tr = new TreeRow(r, true, [], parent, deep + 1);
                parent.children?.push(tr);
                TreeFactory.buildTreeRow(r, childrenProperty, tr, deep + 1);
                if (deep > deepMaxLimit) {
                    console.warn("Max deep limit reached: ", deep);
                    return parent;
                }
            }
        }
        return parent;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy90YWJsZS9zcmMvbGliL3RhYmxlL2ZhY3RvcnkvdHJlZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVsRCxNQUFNLE9BQU8sV0FBVztJQUd0QixNQUFNLENBQUMsYUFBYSxDQUNsQixJQUFTLEVBQ1QsbUJBQTJCLFVBQVUsRUFDckMsZUFBdUIsRUFBRTtRQUV6QixNQUFNLEdBQUcsR0FBaUIsRUFBRSxDQUFDO1FBQzdCLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3BCLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBSSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQ3hGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBR0QsTUFBTSxDQUFDLFlBQVksQ0FDakIsSUFBTyxFQUNQLG1CQUEyQixVQUFVLEVBQ3JDLFNBQXFCLElBQUksT0FBTyxDQUFJLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxzQkFBc0I7SUFDekYsT0FBZSxDQUFDLEVBQ2hCLGVBQXVCLEVBQUU7UUFFekIsSUFBSSxJQUFJLEdBQUcsWUFBWSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDL0MsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUNELGFBQWE7UUFDYixNQUFNLFFBQVEsR0FBb0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekQsSUFBSSxRQUFRLEVBQUU7WUFDWixLQUFLLE1BQU0sQ0FBQyxJQUFJLFFBQVEsRUFBRTtnQkFDeEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxPQUFPLENBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDekQsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQzFCLFdBQVcsQ0FBQyxZQUFZLENBQ3RCLENBQUMsRUFDRCxnQkFBZ0IsRUFDaEIsRUFBRSxFQUNGLElBQUksR0FBRyxDQUFDLENBQ1QsQ0FBQztnQkFDRixJQUFJLElBQUksR0FBRyxZQUFZLEVBQUU7b0JBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQy9DLE9BQU8sTUFBTSxDQUFDO2lCQUNmO2FBQ0Y7U0FDRjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyZWVSb3cgfSBmcm9tIFwiLi4vZGF0YS9jb21tb24vdHJlZS1yb3dcIjtcblxuZXhwb3J0IGNsYXNzIFRyZWVGYWN0b3J5IHtcblxuXG4gIHN0YXRpYyBidWlsZFRyZWVSb3dzPFQ+KFxuICAgIGRhdGE6IFRbXSxcbiAgICBjaGlsZHJlblByb3BlcnR5OiBzdHJpbmcgPSBcImNoaWxkcmVuXCIsXG4gICAgZGVlcE1heExpbWl0OiBudW1iZXIgPSAxMik6IFRyZWVSb3c8VD5bXSB7XG5cbiAgICBjb25zdCByZXQ6IFRyZWVSb3c8VD5bXSA9IFtdO1xuICAgIGZvciAoY29uc3QgciBvZiBkYXRhKSB7XG4gICAgICByZXQucHVzaChUcmVlRmFjdG9yeS5idWlsZFRyZWVSb3c8VD4ociwgY2hpbGRyZW5Qcm9wZXJ0eSwgdW5kZWZpbmVkLCAwLCBkZWVwTWF4TGltaXQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG5cbiAgc3RhdGljIGJ1aWxkVHJlZVJvdzxUPihcbiAgICBkYXRhOiBULFxuICAgIGNoaWxkcmVuUHJvcGVydHk6IHN0cmluZyA9IFwiY2hpbGRyZW5cIixcbiAgICBwYXJlbnQ6IFRyZWVSb3c8VD4gPSBuZXcgVHJlZVJvdzxUPihkYXRhLCB0cnVlLCBbXSwgdW5kZWZpbmVkLCAwKSwgLy8sIGZhbHNlICwgJzAnLCAnMCcpLFxuICAgIGRlZXA6IG51bWJlciA9IDAsXG4gICAgZGVlcE1heExpbWl0OiBudW1iZXIgPSAxMik6IFRyZWVSb3c8VD4ge1xuXG4gICAgaWYgKGRlZXAgPiBkZWVwTWF4TGltaXQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIk1heCBkZWVwIGxpbWl0IHJlYWNoZWQ6IFwiLCBkZWVwKTtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBjaGlsZHJlbjogVFtdIHwgdW5kZWZpbmVkID0gZGF0YVtjaGlsZHJlblByb3BlcnR5XTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIGZvciAoY29uc3QgciBvZiBjaGlsZHJlbikge1xuICAgICAgICBjb25zdCB0ciA9IG5ldyBUcmVlUm93PFQ+KHIsIHRydWUsIFtdLCBwYXJlbnQsIGRlZXAgKyAxKTtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuPy5wdXNoKHRyKTtcbiAgICAgICAgVHJlZUZhY3RvcnkuYnVpbGRUcmVlUm93KFxuICAgICAgICAgIHIsXG4gICAgICAgICAgY2hpbGRyZW5Qcm9wZXJ0eSxcbiAgICAgICAgICB0cixcbiAgICAgICAgICBkZWVwICsgMVxuICAgICAgICApO1xuICAgICAgICBpZiAoZGVlcCA+IGRlZXBNYXhMaW1pdCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIk1heCBkZWVwIGxpbWl0IHJlYWNoZWQ6IFwiLCBkZWVwKTtcbiAgICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnQ7XG4gIH1cbn1cblxuIl19