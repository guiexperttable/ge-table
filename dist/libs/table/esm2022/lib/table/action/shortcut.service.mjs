import { WindowsShortcutActionIdMapping } from "./windows-shortcut-actionId-mapping";
import { OsxShortcutActionIdMapping } from "./osx-shortcut-actionId-mapping";
export class ShortcutService {
    tableScope;
    shortcutActionIdMapping = {};
    listener = [];
    constructor(tableScope) {
        this.tableScope = tableScope;
        this.listener.push(tableScope);
        this.init();
    }
    addListener(listener) {
        if (!this.listener.includes(listener)) {
            this.listener.push(listener);
        }
    }
    init() {
        if (this.isMacintosh()) {
            Object.assign(this.shortcutActionIdMapping, new OsxShortcutActionIdMapping().get());
        }
        else {
            Object.assign(this.shortcutActionIdMapping, new WindowsShortcutActionIdMapping().get());
        }
        Object.assign(this.shortcutActionIdMapping, this.tableScope.tableOptions.shortcutActionIdMapping);
        if (this.isDebug()) {
            console.debug("ShortcutService", this.shortcutActionIdMapping);
        }
        // add key down listener:
        this.tableScope.hostElement.addEventListener("keydown", this.onKeyDown.bind(this));
        //this.tableScope.hostElement.addEventListener("keyup", this.onKeyDown.bind(this));
    }
    isMacintosh() {
        return navigator.platform.indexOf("Mac") > -1;
    }
    isDebug() {
        return this.isLocalhost();
    }
    isLocalhost() {
        return (location.hostname === "localhost" || location.hostname === "127.0.0.1");
    }
    onKeyDown(evt) {
        const actionId = this.findEnty(evt);
        if (actionId) {
            const consumed = this.emit(actionId);
            if (consumed) {
                evt.preventDefault();
                evt.stopPropagation();
            }
        }
    }
    emit(actionId) {
        if (this.isDebug()) {
            console.debug("ShortcutService emit:", actionId);
        }
        let ret = false;
        for (const l of this.listener) {
            const consumed = l.onActionTriggered(actionId);
            if (consumed) {
                ret = true;
            }
        }
        return ret;
    }
    findEnty(evt) {
        const tokens = this.getTokenByEvent(evt);
        if (this.isDebug()) {
            console.debug("ShortcutService tokens:", tokens);
        }
        for (const key in this.shortcutActionIdMapping) {
            const shortcutTokens = key
                .replace(/opt/g, "alt")
                .replace(/cmd/g, "meta")
                .split(/[\+ ]/g).sort();
            if (this.areTokensEquals(tokens, shortcutTokens)) {
                return this.shortcutActionIdMapping[key];
            }
        }
        return undefined;
    }
    areTokensEquals(tokens1, tokens2) {
        if (tokens1.length !== tokens2.length) {
            return false;
        }
        if (tokens1.length === 0) {
            return false;
        }
        for (let i = 0; i < tokens1.length; i++) {
            if (tokens1[i] !== tokens2[i]) {
                return false;
            }
        }
        return true;
    }
    getTokenByEvent(evt) {
        const tokens = [];
        if (evt.altKey) {
            tokens.push("alt");
        }
        if (evt.shiftKey) {
            tokens.push("shift");
        }
        if (evt.ctrlKey) {
            tokens.push("ctrl");
        }
        if (evt.metaKey) {
            tokens.push("meta");
        }
        if (evt.code) {
            tokens.push(evt.code.toLowerCase().replace(/key/g, ""));
        }
        return tokens.sort();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRjdXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdGFibGUvc3JjL2xpYi90YWJsZS9hY3Rpb24vc2hvcnRjdXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNyRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUk3RSxNQUFNLE9BQU8sZUFBZTtJQU1kO0lBSkosdUJBQXVCLEdBQTRCLEVBQUUsQ0FBQztJQUN0RCxRQUFRLEdBQTBCLEVBQUUsQ0FBQztJQUU3QyxZQUNZLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFFaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUdELFdBQVcsQ0FBQyxRQUE2QjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLElBQUksMEJBQTBCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3JGO2FBQU07WUFDTCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLDhCQUE4QixFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUN6RjtRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHVC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S0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDN0IsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sZUFBZSxDQUFDLEdBQWtCO1FBQ3hDLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUM1QixJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEI7UUFDRCxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7WUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFO1lBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNyQjtRQUNELElBQUksR0FBRyxDQUFDLElBQUksRUFBRTtZQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDekQ7UUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25JZCB9IGZyb20gXCIuL2FjdGlvbi1pZC50eXBlXCI7XG5pbXBvcnQgeyBUYWJsZVNjb3BlIH0gZnJvbSBcIi4uL3RhYmxlLXNjb3BlXCI7XG5pbXBvcnQgeyBTaG9ydGN1dEFjdGlvbklkTWFwcGluZyB9IGZyb20gXCIuL3Nob3J0Y3V0LWFjdGlvbmlkLW1hcHBpbmcudHlwZVwiO1xuaW1wb3J0IHsgV2luZG93c1Nob3J0Y3V0QWN0aW9uSWRNYXBwaW5nIH0gZnJvbSBcIi4vd2luZG93cy1zaG9ydGN1dC1hY3Rpb25JZC1tYXBwaW5nXCI7XG5pbXBvcnQgeyBPc3hTaG9ydGN1dEFjdGlvbklkTWFwcGluZyB9IGZyb20gXCIuL29zeC1zaG9ydGN1dC1hY3Rpb25JZC1tYXBwaW5nXCI7XG5pbXBvcnQgeyBPbkFjdGlvblRyaWdnZXJlZElmIH0gZnJvbSBcIi4vb24tYWN0aW9uLXRyaWdnZXJlZC5pZlwiO1xuXG5cbmV4cG9ydCBjbGFzcyBTaG9ydGN1dFNlcnZpY2Uge1xuXG4gIHByaXZhdGUgc2hvcnRjdXRBY3Rpb25JZE1hcHBpbmc6IFNob3J0Y3V0QWN0aW9uSWRNYXBwaW5nID0ge307XG4gIHByaXZhdGUgbGlzdGVuZXI6IE9uQWN0aW9uVHJpZ2dlcmVkSWZbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCB0YWJsZVNjb3BlOiBUYWJsZVNjb3BlXG4gICkge1xuICAgIHRoaXMubGlzdGVuZXIucHVzaCh0YWJsZVNjb3BlKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG5cbiAgYWRkTGlzdGVuZXIobGlzdGVuZXI6IE9uQWN0aW9uVHJpZ2dlcmVkSWYpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXIuaW5jbHVkZXMobGlzdGVuZXIpKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgaWYgKHRoaXMuaXNNYWNpbnRvc2goKSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnNob3J0Y3V0QWN0aW9uSWRNYXBwaW5nLCBuZXcgT3N4U2hvcnRjdXRBY3Rpb25JZE1hcHBpbmcoKS5nZXQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5zaG9ydGN1dEFjdGlvbklkTWFwcGluZywgbmV3IFdpbmRvd3NTaG9ydGN1dEFjdGlvbklkTWFwcGluZygpLmdldCgpKTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLnNob3J0Y3V0QWN0aW9uSWRNYXBwaW5nLCB0aGlzLnRhYmxlU2NvcGUudGFibGVPcHRpb25zLnNob3J0Y3V0QWN0aW9uSWRNYXBwaW5nKTtcbiAgICBpZiAodGhpcy5pc0RlYnVnKCkpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJTaG9ydGN1dFNlcnZpY2VcIiwgdGhpcy5zaG9ydGN1dEFjdGlvbklkTWFwcGluZyk7XG4gICAgfVxuICAgIC8vIGFkZCBrZXkgZG93biBsaXN0ZW5lcjpcbiAgICB0aGlzLnRhYmxlU2NvcGUuaG9zdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24uYmluZCh0aGlzKSk7XG4gICAgLy90aGlzLnRhYmxlU2NvcGUuaG9zdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMub25LZXlEb3duLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc01hY2ludG9zaCgpIHtcbiAgICByZXR1cm4gbmF2aWdhdG9yLnBsYXRmb3JtLmluZGV4T2YoXCJNYWNcIikgPiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgaXNEZWJ1ZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc0xvY2FsaG9zdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0xvY2FsaG9zdCgpIHtcbiAgICByZXR1cm4gKGxvY2F0aW9uLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiIHx8IGxvY2F0aW9uLmhvc3RuYW1lID09PSBcIjEyNy4wLjAuMVwiKTtcbiAgfVxuXG5cbiAgcHJpdmF0ZSBvbktleURvd24oZXZ0OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgYWN0aW9uSWQgPSB0aGlzLmZpbmRFbnR5KGV2dCk7XG4gICAgaWYgKGFjdGlvbklkKSB7XG4gICAgICBjb25zdCBjb25zdW1lZCA9IHRoaXMuZW1pdChhY3Rpb25JZCk7XG4gICAgICBpZiAoY29uc3VtZWQpIHtcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGVtaXQoYWN0aW9uSWQ6IEFjdGlvbklkKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuaXNEZWJ1ZygpKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwiU2hvcnRjdXRTZXJ2aWNlIGVtaXQ6XCIsIGFjdGlvbklkKTtcbiAgICB9XG4gICAgbGV0IHJldCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgbCBvZiB0aGlzLmxpc3RlbmVyKSB7XG4gICAgICBjb25zdCBjb25zdW1lZCA9IGwub25BY3Rpb25UcmlnZ2VyZWQoYWN0aW9uSWQpO1xuICAgICAgaWYgKGNvbnN1bWVkKSB7XG4gICAgICAgIHJldCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBwcml2YXRlIGZpbmRFbnR5KGV2dDogS2V5Ym9hcmRFdmVudCk6IEFjdGlvbklkIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCB0b2tlbnMgPSB0aGlzLmdldFRva2VuQnlFdmVudChldnQpO1xuICAgIGlmICh0aGlzLmlzRGVidWcoKSkge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIlNob3J0Y3V0U2VydmljZSB0b2tlbnM6XCIsIHRva2Vucyk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuc2hvcnRjdXRBY3Rpb25JZE1hcHBpbmcpIHtcbiAgICAgIGNvbnN0IHNob3J0Y3V0VG9rZW5zID0ga2V5XG4gICAgICAgIC5yZXBsYWNlKC9vcHQvZywgXCJhbHRcIilcbiAgICAgICAgLnJlcGxhY2UoL2NtZC9nLCBcIm1ldGFcIilcbiAgICAgICAgLnNwbGl0KC9bXFwrIF0vZykuc29ydCgpO1xuICAgICAgaWYgKHRoaXMuYXJlVG9rZW5zRXF1YWxzKHRva2Vucywgc2hvcnRjdXRUb2tlbnMpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3J0Y3V0QWN0aW9uSWRNYXBwaW5nW2tleV0gYXMgQWN0aW9uSWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGFyZVRva2Vuc0VxdWFscyh0b2tlbnMxOiBzdHJpbmdbXSwgdG9rZW5zMjogc3RyaW5nW10pOiBib29sZWFuIHtcbiAgICBpZiAodG9rZW5zMS5sZW5ndGggIT09IHRva2VuczIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0b2tlbnMxLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0b2tlbnMxW2ldICE9PSB0b2tlbnMyW2ldKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VG9rZW5CeUV2ZW50KGV2dDogS2V5Ym9hcmRFdmVudCk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCB0b2tlbnM6IHN0cmluZ1tdID0gW107XG4gICAgaWYgKGV2dC5hbHRLZXkpIHtcbiAgICAgIHRva2Vucy5wdXNoKFwiYWx0XCIpO1xuICAgIH1cbiAgICBpZiAoZXZ0LnNoaWZ0S2V5KSB7XG4gICAgICB0b2tlbnMucHVzaChcInNoaWZ0XCIpO1xuICAgIH1cbiAgICBpZiAoZXZ0LmN0cmxLZXkpIHtcbiAgICAgIHRva2Vucy5wdXNoKFwiY3RybFwiKTtcbiAgICB9XG4gICAgaWYgKGV2dC5tZXRhS2V5KSB7XG4gICAgICB0b2tlbnMucHVzaChcIm1ldGFcIik7XG4gICAgfVxuICAgIGlmIChldnQuY29kZSkge1xuICAgICAgdG9rZW5zLnB1c2goZXZ0LmNvZGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9rZXkvZywgXCJcIikpO1xuICAgIH1cbiAgICByZXR1cm4gdG9rZW5zLnNvcnQoKTtcbiAgfVxuXG59XG4iXX0=